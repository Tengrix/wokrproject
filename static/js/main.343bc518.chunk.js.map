{"version":3,"sources":["Pics/Iphone-spinner-2.gif","components/common/Preloader/Preloader.tsx","Pics/51f6fb256629fc755b8870c801092942.png","redux/dialog-reducer.ts","components/utils/helper.ts","redux/users-reducer.ts","api/api.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Friends/Friends.tsx","redux/app-reducer.ts","components/Header/Header.tsx","App.tsx","redux/friends-reducer.ts","redux/redux-store.ts","index.tsx","redux/auth-reducer.ts","redux/profile-reducer.ts"],"names":["Preloader","src","preloader","alt","initialState","users","id","name","messages","dialogActions","sendMessage","dialog","type","dialogReducer","state","action","objectHelper","items","itemId","newObjProp","map","el","pageCount","totalUsersCount","currentPage","isFetching","isFollowing","filter","searchingName","isFriend","usersActions","userId","pageNumber","payload","getUser","dispatch","a","usersAPI","getUsers","response","totalCount","followUnfollow","apiMethod","actionCreator","resultCode","ResultCodesEnum","Success","FollowFriend","FollowFriends","bind","UnFollowFriend","UnFollowFriends","usersReducer","followed","instance","axios","create","baseURL","withCredentials","headers","term","friend","get","then","data","getProfile","console","warn","profileAPI","post","delete","authAPI","getAuthMe","getLogin","email","password","rememberMe","captcha","getLogOut","getCaptcha","getStatus","updateStatus","status","put","saveProfile","profile","savePhoto","img","formData","FormData","append","News","props","Music","Settings","Friends","React","memo","isInitialized","appReducer","appActions","Headers","useDispatch","useSelector","auth","isAuth","photos","login","profilePage","useEffect","AuthMe","Header","Layout","className","span","theme","mode","defaultSelectedKeys","Item","to","small","userPhoto","style","backgroundColor","icon","UserOutlined","onClick","AuthLogOut","Dialogs","lazy","UsersContainer","ProfileContainer","LoginForm","SubMenu","Menu","Content","Footer","Sider","App","log","appPage","profileName","fullName","profileActions","updateProfilesName","padding","margin","width","defaultOpenKeys","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","Suspense","fallback","component","textAlign","position","top","CircularProgress","friends","friendsReducer","rootReducer","combineReducers","profileReducer","dialogPage","sideBarPage","usersPage","authReducer","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById","authActions","url","AuthLogin","InvalidSymbols","Captcha","message","length","stopSubmit","_error","likeCount","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","large","isOwner","error","setToggle","addPost","posts","setProfile","setStatus","deletePost","setToggleFetching","value","successSavePhoto","setError","GetProfile","getProfileStatus","updateProfileStatus","saveUserProfile","getState","Promise","reject","saveUserPhoto","newPost"],"mappings":"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","file":"static/js/main.343bc518.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Iphone-spinner-2.d3fbaf2b.gif\";","import React from \"react\";\r\n\r\nimport preloader from './../../../Pics/Iphone-spinner-2.gif'\r\n\r\n\r\nconst Preloader = () =>{\r\n    return <div>\r\n        <img src={preloader} alt=\"\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","export default __webpack_public_path__ + \"static/media/51f6fb256629fc755b8870c801092942.22c31152.png\";","import {InferActionsType} from \"./redux-store\";\r\n\r\n\r\n\r\nexport type messagesType = {\r\n    id: number;\r\n    messages: string;\r\n}\r\nexport type userType = {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\n\r\nexport type InitialDialogStateType = {\r\n    users: userType[]\r\n    messages: messagesType[]\r\n}\r\nlet initialState: InitialDialogStateType = {\r\n    users: [\r\n        {id: '1', name: 'Damir'},\r\n        {id: '2', name: 'Abay'},\r\n        {id: '3', name: 'Kyama'},\r\n        {id: '4', name: 'Kaidar'},\r\n        {id: '5', name: 'Aday'},\r\n\r\n    ] as userType[],\r\n    messages: [\r\n        {id: 1, messages: 'Hi'},\r\n        {id: 2, messages: 'What\\'s up?'},\r\n        {id: 3, messages: 'How\\'s it going?'},\r\n\r\n    ] as messagesType[]\r\n}\r\n\r\nexport const dialogReducer = (state: InitialDialogStateType = initialState, action: ActionType):InitialDialogStateType => {\r\n    switch (action.type){\r\n        case 'SEND-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id:6, messages: action.dialog} ]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = InferActionsType<typeof dialogActions>\r\n\r\nexport const dialogActions = {\r\n    sendMessage:(dialog:string) => {\r\n        return {\r\n            type: 'SEND-MESSAGE',\r\n            dialog\r\n        } as const\r\n    }\r\n}\r\n\r\n\r\nexport default dialogReducer","import {UsersType} from \"../../redux/users-reducer\";\r\n\r\nexport const objectHelper = (items: UsersType[],itemId:number, newObjProp: { followed: boolean }) => {\r\n    return  items.map(el => el.id === itemId ? {...el, ...newObjProp} : el)\r\n}","import {CommonResponseType, ResultCodesEnum, usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {objectHelper} from \"../components/utils/helper\";\r\nimport {AppStateType, InferActionsType} from \"./redux-store\";\r\nimport {userType} from \"./dialog-reducer\";\r\n\r\nexport type UsersPhotoType = {\r\n    small: string;\r\n    large: string;\r\n}\r\nexport type filterType = {\r\n    searchingName:string;\r\n    isFriend:null|boolean;\r\n}\r\n\r\nexport type UsersType = {\r\n    id: number;\r\n    photoUrl: string\r\n    name: string;\r\n    status: string\r\n    followed: boolean\r\n    photos: UsersPhotoType;\r\n}\r\nexport type userInitialStateType = {\r\n    users: UsersType[];\r\n    pageCount: number;\r\n    totalUsersCount: number;\r\n    currentPage: number;\r\n    isFetching: boolean;\r\n    isFollowing: number[];\r\n    filter:filterType\r\n}\r\n\r\nlet initialState: userInitialStateType = {\r\n    users: [] as UsersType[],\r\n    pageCount: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowing: [],\r\n    filter:{\r\n        searchingName: '',\r\n        isFriend:null as null|boolean,\r\n    }\r\n}\r\n\r\nconst usersReducer = (state: userInitialStateType = initialState, action: ActionType): userInitialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: objectHelper(state.users, action.userId,{followed:true})\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: objectHelper(state.users, action.userId,{followed:false})\r\n            }\r\n        case \"SET-USERS\":\r\n            return {\r\n                ...state, users: action.users\r\n            }\r\n        case 'SET-PAGE':\r\n            return {\r\n                ...state, currentPage: action.pageNumber\r\n            }\r\n        case \"SET-TOTAL-USERS\":\r\n            return {\r\n                ...state, totalUsersCount: action.totalUsersCount\r\n            }\r\n        case \"SET-TOGGLE-FETCHING\":\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case \"SET-TOGGLE-FOLLOWING\":\r\n            return {\r\n                ...state,\r\n                isFollowing: action.isFetching ? [...state.isFollowing, action.id] :\r\n                    state.isFollowing.filter(el => el != action.id)\r\n            }\r\n        case 'SEARCH-USER':\r\n            return {\r\n                ...state, filter: action.payload\r\n            }\r\n        // case \"IS-FRIEND\":\r\n        //     return {\r\n        //         ...state, isFriend: action.friend\r\n        //     }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType = InferActionsType<typeof usersActions>\r\n\r\nexport const usersActions = {\r\n    follow: (userId: number) => {\r\n        return {\r\n            type: 'FOLLOW',\r\n            userId\r\n        } as const\r\n    },\r\n    unfollow: (userId: number) => {\r\n        return {\r\n            type: 'UNFOLLOW',\r\n            userId\r\n        } as const\r\n    },\r\n    setUser: (users: UsersType[]) => {\r\n        return {\r\n            type: 'SET-USERS',\r\n            users\r\n        } as const\r\n    },\r\n    setCurrentPage: (pageNumber: number) => {\r\n        return {\r\n            type: 'SET-PAGE',\r\n            pageNumber\r\n        } as const\r\n    },\r\n    setTotalUsersCount: (totalUsersCount: number) => {\r\n        return {\r\n            type: 'SET-TOTAL-USERS',\r\n            totalUsersCount\r\n        } as const\r\n    },\r\n    setToggleFetching: (isFetching: boolean) => {\r\n        return {\r\n            type: \"SET-TOGGLE-FETCHING\",\r\n            isFetching\r\n        } as const\r\n    },\r\n    setToggleFollowing: (isFetching: boolean, id: number) => {\r\n        return {\r\n            type: 'SET-TOGGLE-FOLLOWING',\r\n            id,\r\n            isFetching\r\n        } as const\r\n    },\r\n    setSearchingUser: (filter:filterType) =>{\r\n        return{\r\n            type:'SEARCH-USER',\r\n            payload:filter\r\n        }as const\r\n    },\r\n    // isUserMyFriend: (friend: boolean | null) =>{\r\n    //     return{\r\n    //         type:'IS-FRIEND',\r\n    //         friend\r\n    //     }as const\r\n    // },\r\n}\r\n\r\n\r\n\r\nexport const getUser = (currentPage: number, pageCount: number, filter:filterType) => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(usersActions.setToggleFetching(true));\r\n            dispatch(usersActions.setCurrentPage(currentPage))\r\n            dispatch(usersActions.setSearchingUser(filter))\r\n            const response = await usersAPI.getUsers(currentPage, pageCount,filter.searchingName, filter.isFriend)\r\n            dispatch(usersActions.setToggleFetching(false))\r\n            dispatch(usersActions.setUser(response.items))\r\n            dispatch(usersActions.setTotalUsersCount(response.totalCount))\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n}\r\nexport const followUnfollow = async (dispatch: Dispatch, userId: number, apiMethod: (userId:number)=> Promise<CommonResponseType>, actionCreator: (userId: number) => ActionType) => {\r\n    dispatch(usersActions.setToggleFollowing(true, userId))\r\n    const response = await apiMethod(userId)\r\n    if (response.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(usersActions.setToggleFollowing(false, userId))\r\n}\r\n\r\nexport const FollowFriend = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            await followUnfollow(dispatch, userId, usersAPI.FollowFriends.bind(usersAPI), usersActions.follow)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n}\r\nexport const UnFollowFriend = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            await followUnfollow(dispatch, userId, usersAPI.UnFollowFriends.bind(usersAPI), usersActions.unfollow)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n}\r\nexport default usersReducer","import axios from \"axios\";\r\nimport {ProfilePhotoType, ProfileType} from \"../redux/profile-reducer\";\r\nimport {UsersType} from \"../redux/users-reducer\";\r\nimport {setUserDataType} from \"../redux/auth-reducer\";\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials:true,\r\n    headers:{\r\n        'API-KEY': '1eaa5d66-d310-487c-a1d0-2fd59af6c2de'\r\n    }\r\n})\r\nexport const usersAPI = {\r\n    getUsers (currentPage:number,pageCount:number,term:string, friend:boolean| null) {\r\n        return  instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageCount}&term=${term}` + (friend===null? '':`&friend=${friend}`)).then(response=> {\r\n            return response.data\r\n        })\r\n    },\r\n    getProfile (userId:number)  {\r\n        console.warn('Obsolete method. Please use profileApi object.')\r\n        return profileAPI.getProfile(userId)\r\n   },\r\n\r\n    FollowFriends(id:number){\r\n        return instance.post<CommonResponseType>(`follow/${id}`).then(response=>response.data)\r\n    },\r\n    UnFollowFriends(id:number){\r\n        return instance.delete<CommonResponseType>(`follow/${id}`).then(response=>response.data)\r\n    }\r\n}\r\nexport const authAPI = {\r\n\r\n    getAuthMe (){\r\n        return instance.get<GetAuthType>(`auth/me`).then(response=>response.data)\r\n    },\r\n    getLogin(email:string, password:string,rememberMe:boolean, captcha:string){\r\n        return instance.post<CommonResponseType<{ data: PostAuthLoginType }>>('auth/login', {email, password, rememberMe,captcha});\r\n    },\r\n    getLogOut(){\r\n        return instance.delete<CommonResponseType>('auth/login')\r\n    },\r\n    getCaptcha(){\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile (userId:number)  {\r\n        return  instance.get<ProfileType>(`profile/`+ userId)\r\n    },\r\n    getStatus (userId:number) {\r\n        return instance.get<any>(`profile/status/${userId}`)\r\n    },\r\n    updateStatus (status:string) {\r\n        return instance.put<CommonResponseType<{data:string}>>('profile/status',{status})\r\n    },\r\n    saveProfile(profile:ProfileType | null){\r\n        return instance.put<CommonResponseType<{ data:ProfilesType }>>(`profile`,profile)\r\n    },\r\n    savePhoto(img: File){\r\n        const formData = new FormData()\r\n        formData.append('image',img)\r\n        return instance.put<CommonResponseType<{photos: ProfilePhotoType }>>(`profile/photo`,formData, {\r\n            headers:{\r\n                'Content-type':'mulitpart/form-data'\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Fail = 1,\r\n    InvalidSymbols = 10\r\n}\r\n\r\nexport type CommonResponseType<T = {}> = {\r\n    data:T;\r\n    resultCode:number;\r\n    messages:string[];\r\n    fieldsErrors:string[];\r\n\r\n}\r\n\r\ntype ContactsType = {\r\n    github: string;\r\n    vk: string;\r\n    facebook: string;\r\n    instagram: string;\r\n    twitter?: string;\r\n    website?: string;\r\n    youtube?: string;\r\n    mainLink?: string;\r\n}\r\n\r\nexport type ProfilesType = {\r\n    aboutMe:string;\r\n    userId: number;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string;\r\n    fullName: string;\r\n    contacts?: ContactsType\r\n\r\n}\r\n\r\nexport type GetUsersType = {\r\n    error: string;\r\n    totalCount: number;\r\n    items: UsersType[]\r\n}\r\n\r\nexport type GetAuthType = {\r\n    data:setUserDataType\r\n    resultCode: number;\r\n    messages: string[];\r\n    fieldsErrors: string[];\r\n}\r\ntype PostAuthType = {\r\n    email: string;\r\n    password:string;\r\n    rememberMe: boolean;\r\n    captcha:string;\r\n}\r\nexport type PostAuthLoginType = {\r\n    resultCode: number;\r\n    messages: string[];\r\n    fieldsError: string[];\r\n    data: PostAuthType\r\n}","import React from 'react'\r\nimport s from './News.module.css'\r\nfunction News(props:any){\r\n\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\nexport default News","import React from 'react'\r\nfunction Music(props:any){\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music","import React from 'react'\r\nimport s from './Settings.module.css'\r\nfunction Settings(props:any){\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings","import React from 'react'\r\nconst Friends = React.memo(() =>{\r\n    return (\r\n        <div>\r\n            Friends\r\n        </div>\r\n    )\r\n})\r\nexport default Friends","import {AuthMe} from \"./auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {InferActionsType} from \"./redux-store\";\r\n\r\nexport type appInitialStateType = {\r\n    isInitialized: boolean\r\n}\r\nconst initialState: appInitialStateType = {\r\n    isInitialized: false\r\n}\r\nexport const appReducer = (state: appInitialStateType = initialState, action:ActionsType): appInitialStateType => {\r\n    switch (action.type) {\r\n        case'IS-INITIALIZED': {\r\n            return {...state, isInitialized: true}\r\n        }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionsType<typeof appActions>\r\n\r\nexport const appActions = {\r\n    isInitializedAc: () => ({type: 'IS-INITIALIZED'} as const),\r\n}\r\nexport const initializeAppTC = () => async (dispatch: ThunkDispatch<any, any, any>) => {\r\n    try {\r\n        await dispatch(AuthMe())\r\n        dispatch(appActions.isInitializedAc())\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\nexport default appReducer;","import React, {useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport s from './Header.module.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {AuthLogOut, AuthMe, setUserDataType} from \"../../redux/auth-reducer\";\nimport {Avatar, Button, Col, Image, Layout, Menu, Row} from \"antd\";\nimport {AntDesignOutlined, UserOutlined} from \"@ant-design/icons\";\nimport userPhoto from \"../../Pics/51f6fb256629fc755b8870c801092942.png\";\nimport {ProfilePhotoType} from \"../../redux/profile-reducer\";\n\nconst Headers = React.memo(() => {\n    const dispatch = useDispatch()\n    const {isAuth, login} = useSelector<AppStateType, setUserDataType>(state => state.auth.data)\n    const photos = useSelector<AppStateType, ProfilePhotoType>(state => state.profilePage.profile.photos)\n    useEffect(() => {\n        dispatch(AuthMe())\n    }, [])\n\n    const logout = () => {\n        dispatch(AuthLogOut())\n    }\n    const {Header} = Layout\n    return (\n        <Header className={'header'}>\n            <div>\n                <Row>\n                    <Col span={16}>\n                        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\n                            <Menu.Item key=\"1\"><Link to='/developers'>Developers</Link></Menu.Item>\n                        </Menu>\n                    </Col>\n                    {isAuth ?\n                        <>\n                            <Col span={1}>\n                                <Avatar src={<Image src={photos.small != null ? photos.small : userPhoto}/>}\n                                        style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\n                            </Col>\n                            <Col span={5}>\n                                <Button onClick={logout}> Log out</Button>\n                            </Col>\n                        </>\n                        :\n                        <Col span={6}>\n                            <Button><Link to={'/login'}>Login</Link></Button>\n                        </Col>}\n                </Row>\n            </div>\n        </Header>\n    );\n})\nexport default Headers;\n","import React, {useEffect} from 'react';\r\nimport Navbar from './components/Navbar/Navbar'\r\nimport './App.css';\r\nimport {Link, Redirect, Route, Switch} from 'react-router-dom'\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport Friends from \"./components/Friends/Friends\";\r\nimport 'antd/dist/antd.css'\r\nimport {Layout, Menu, Breadcrumb, Col, Row} from 'antd';\r\nimport {UserOutlined, LaptopOutlined, NotificationOutlined} from '@ant-design/icons';\r\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\n// import UsersContainer from \"./components/Users/UsersContainer\";\r\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\n// import LoginForm from \"./components/Login/LoginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport {initializeAppTC} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport Headers from \"./components/Header/Header\";\r\nimport s from \"./components/Navbar/Navbar.module.css\";\r\nimport {setUserDataType} from \"./redux/auth-reducer\";\r\nimport {profileActions, ProfileType} from \"./redux/profile-reducer\";\r\n\r\nconst Dialogs = React.lazy(() => import(\"./components/Dialogs/Dialogs\"))\r\nconst UsersContainer = React.lazy(() => import(\"./components/Users/UsersContainer\"))\r\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"))\r\nconst LoginForm = React.lazy(() => import(\"./components/Login/LoginForm\"))\r\nconst {SubMenu} = Menu;\r\nconst {Header, Content, Footer, Sider} = Layout;\r\n\r\nfunction App() {\r\n    console.log('Dialogs')\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppStateType, boolean>(state => state.appPage.isInitialized)\r\n    const {login, email} = useSelector<AppStateType, setUserDataType>(state => state.auth.data)\r\n    const profileName = useSelector<AppStateType, string>(state => state.profilePage.profile.fullName)\r\n    useEffect(()=>{\r\n        dispatch(profileActions.updateProfilesName(profileName))\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <Layout>\r\n            <Headers/>\r\n            <Content style={{padding: '0 50px'}}>\r\n                <Breadcrumb style={{margin: '16px 0'}}>\r\n                    <Breadcrumb.Item>{login}</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>{profileName}</Breadcrumb.Item>\r\n                </Breadcrumb>\r\n                <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                    <Sider className=\"site-layout-background\" width={200}>\r\n                        <Menu\r\n                            mode=\"inline\"\r\n                            defaultSelectedKeys={['1']}\r\n                            defaultOpenKeys={['sub1']}\r\n                            style={{height: '100%'}}\r\n                        >\r\n                            <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\r\n                                <Menu.Item key=\"1\"><Link to='/profile'>Profile</Link></Menu.Item>\r\n                                <Menu.Item key=\"2\"><Link to='/dialogs'>Messages</Link></Menu.Item>\r\n                                <Menu.Item key=\"3\"><Link to='/news'>News</Link></Menu.Item>\r\n                                <Menu.Item key=\"4\"><Link to='/music'>Music</Link></Menu.Item>\r\n                                <Menu.Item key=\"5\"><Link to='/settings'>Settings</Link></Menu.Item>\r\n                                <Menu.Item key=\"6\"><Link to='/music'>Music</Link></Menu.Item>\r\n                            </SubMenu>\r\n                            <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Developers\">\r\n                                <Menu.Item key=\"5\"><Link to='/developers'>Users</Link></Menu.Item>\r\n                            </SubMenu>\r\n                            <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"Friends\">\r\n                                <Menu.Item key=\"9\"><Link to='/friends'>Friends</Link></Menu.Item>\r\n                            </SubMenu>\r\n                        </Menu>\r\n                    </Sider>\r\n                    <Content style={{padding: '0 24px', minHeight: 280}}>\r\n                        <Switch>\r\n                            <Route exact path='/workproject' render={() => <Redirect to={'/profile'}/>}/>\r\n                            <React.Suspense fallback={<Preloader/>}>\r\n                                <Route path='/dialogs' render={() => <Dialogs/>}/>\r\n                                <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                                <Route path='/developers' render={() => <UsersContainer title={'Samurais'}/>}/>\r\n                                <Route path='/login' render={() => <LoginForm/>}/>\r\n                                {/*<Route path='*' render={() => <div>404 NOT FOUND</div>}/>*/}\r\n                            </React.Suspense>\r\n                            <Route path='/news' component={News}/>\r\n                            <Route path='/music' component={Music}/>\r\n                            <Route path='/settings' component={Settings}/>\r\n                            <Route path='/friends' render={() => <Friends/>}/>\r\n                        </Switch>\r\n                    </Content>\r\n                </Layout>\r\n            </Content>\r\n            <Footer style={{textAlign: 'center'}}>Social Network ©2018 Created by Uakhit Damir</Footer>\r\n        </Layout>\r\n        // <div className=\"app-wrapper\">\r\n        //\r\n        //     <Navbar/>\r\n        //     <div className={'app-wrapper-content'}>\r\n        //         <Switch>\r\n        //             <Route exact path='/' render={() => {\r\n        //                 return <Redirect to={'/profile'}/>\r\n        //             }}/>\r\n        //             <React.Suspense fallback={<Preloader/>}>\r\n        //                 <Route path='/dialogs' render={() => {\r\n        //                     return <Dialogs/>\r\n        //                 }}/>\r\n        //                 <Route path='/profile/:userId?' render={() => {\r\n        //                     return <ProfileContainer/>\r\n        //                 }}/>\r\n        //                 <Route path='/users' render={() => {\r\n        //                     return <UsersContainer title={'Samurais'}/>\r\n        //                 }}/>\r\n        //                 <Route path='/login' render={() => {\r\n        //                     return <LoginForm/>\r\n        //                 }}/>\r\n        //\r\n        //                 {/*<Route path='*' render={() => {*/}\r\n        //                 {/*    return <div>404 NOT FOUND</div>*/}\r\n        //                 {/*}}/>*/}\r\n        //             </React.Suspense>\r\n        //             <Route path='/news' component={News}/>\r\n        //             <Route path='/music' component={Music}/>\r\n        //             <Route path='/settings' component={Settings}/>\r\n        //             <Route path='/friends' render={() => <Friends/>}/>\r\n        //         </Switch>\r\n        //     </div>\r\n        // </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","type ActionsTypesF = {\r\n\r\n}\r\ntype sidebarType = {\r\n    id: number;\r\n    name: string;\r\n}\r\nexport type InitialStateType = {\r\n    friends: sidebarType[]\r\n}\r\nlet initialState: InitialStateType = {\r\n    friends: [\r\n        {id: 1, name: 'Abay'},\r\n        {id: 2, name: 'Karik'}\r\n    ]\r\n}\r\n\r\nexport const friendsReducer = (state:InitialStateType = initialState, action:ActionsTypesF): InitialStateType => {\r\n\r\n    return state\r\n}\r\nexport default friendsReducer","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialog-reducer\";\r\nimport friendsReducer from \"./friends-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\ndeclare global {\r\n    interface Window {store: any}\r\n}\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sideBarPage: friendsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    appPage:appReducer,\r\n})\r\n\r\nexport type AppStateType =ReturnType<typeof rootReducer>\r\ntype PropertiesTypes<T> = T extends {[key:string]: infer U} ? U : never\r\nexport type InferActionsType<T extends {[key:string]: (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)))\r\nwindow.store = window.store || {}\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, ResultCodesEnum, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {InferActionsType} from \"./redux-store\";\r\n\r\n\r\nexport type setUserDataType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean;\r\n}\r\n\r\nexport type AuthInitialStateType = {\r\n    data: setUserDataType\r\n    isFetching: boolean;\r\n    resultCode: number;\r\n    messages: string[];\r\n    captcha: string;\r\n}\r\nlet initialState: AuthInitialStateType = {\r\n    data: {\r\n        id: null,\r\n        email: null,\r\n        login: null,\r\n        isAuth: false\r\n    },\r\n    isFetching: false,\r\n    resultCode: 0,\r\n    messages: [''],\r\n    captcha: ''\r\n}\r\n\r\nexport const authReducer = (state: AuthInitialStateType = initialState, action: ActionsType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            }\r\n        case \"SET-TOGGLE-FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"GET-CAPTCHA\":\r\n            return {\r\n                ...state, captcha: action.url\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionsType<typeof authActions>\r\n\r\nexport const authActions = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n        return {\r\n            type: 'SET-USER-DATA',\r\n            data: {id, email, login, isAuth}\r\n        } as const\r\n    },\r\n    setToggleFetching: (isFetching: boolean) => {\r\n        return {\r\n            type: \"SET-TOGGLE-FETCHING\",\r\n            isFetching\r\n        } as const\r\n    },\r\n    getCaptcha: (url: string) => {\r\n        return {\r\n            type: \"GET-CAPTCHA\",\r\n            url\r\n        } as const\r\n    },\r\n}\r\n\r\n\r\nexport const AuthMe = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        const response = await authAPI.getAuthMe()\r\n        dispatch(authActions.setToggleFetching(false))\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            let {id, login, email} = response.data\r\n            dispatch(authActions.setAuthUserData(id, login, email, true))\r\n            dispatch(authActions.setToggleFetching(true))\r\n        }\r\n    }\r\n}\r\nexport const AuthLogin = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: ThunkDispatch<any, any, any>) => {\r\n    const response = await authAPI.getLogin(email, password, rememberMe, captcha)\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        await dispatch(AuthMe())\r\n    } else {\r\n        if (response.data.resultCode === ResultCodesEnum.InvalidSymbols) {\r\n            await dispatch(Captcha())\r\n        } else {\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n            dispatch(stopSubmit('login',\r\n                {_error: message}))\r\n        }\r\n\r\n    }\r\n}\r\nexport const AuthLogOut = () => async (dispatch: Dispatch) => {\r\n    const response = await authAPI.getLogOut()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(authActions.setAuthUserData(null, null, null, false))\r\n        dispatch(authActions.setToggleFetching(true))\r\n    }\r\n}\r\nexport const Captcha = () => async (dispatch: Dispatch) => {\r\n    const response = await authAPI.getCaptcha()\r\n    if (response.status === 200) {\r\n        dispatch(authActions.getCaptcha(response.data.url))\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer","import {Dispatch} from \"redux\";\r\nimport {profileAPI, ResultCodesEnum} from \"../api/api\";\r\nimport {AppStateType, InferActionsType} from \"./redux-store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\n\r\nexport type messageType = {\r\n    message: string;\r\n    likeCount: number;\r\n    id: number;\r\n}\r\n\r\nexport type ProfilePhotoType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    userId: number;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string;\r\n    fullName: string;\r\n    contacts: {\r\n        github: string;\r\n        vk: string;\r\n        facebook: string;\r\n        instagram: string;\r\n        twitter: string;\r\n        website: string;\r\n        youtube: string;\r\n        mainLink: string;\r\n    }\r\n    photos: ProfilePhotoType;\r\n}\r\n\r\nexport type profileInitialStateType = {\r\n    message: messageType[];\r\n    profile: ProfileType;\r\n    status: string;\r\n    isOwner: boolean;\r\n    error: string;\r\n    setToggle:boolean;\r\n}\r\n\r\nlet initialState: profileInitialStateType = {\r\n    message: [\r\n        {id: 1, message: 'Hi, how are you?', likeCount: 22},\r\n        {id: 2, message: 'It is my first post', likeCount: 11},\r\n\r\n    ] as messageType[],\r\n    profile: {\r\n        aboutMe: '',\r\n        userId: 16786,\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: '',\r\n        fullName: 'Uakhit Damir',\r\n        contacts: {\r\n            github: '',\r\n            vk: '',\r\n            facebook: '',\r\n            instagram: 'damir.gst',\r\n            twitter: '',\r\n            website: '',\r\n            youtube: '',\r\n            mainLink: '',\r\n        },\r\n        photos: {\r\n            large: '',\r\n            small: ''\r\n        }\r\n    },\r\n    isOwner: false,\r\n    status: '',\r\n    error: '',\r\n    setToggle:false,\r\n}\r\n\r\nexport const profileReducer = (state: profileInitialStateType = initialState, action: ActionType): profileInitialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-POST': {\r\n            const newPost: messageType = {\r\n                id: 3,\r\n                message: action.posts,\r\n                likeCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                message: [...state.message, newPost],\r\n            };\r\n        }\r\n        case \"SET-PROFILE\":\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case \"SET-STATUS\":\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case \"DEL-POST\":\r\n            return {\r\n                ...state, message: state.message.filter(el => el.id !== action.id)\r\n            }\r\n        case \"IS-OWNER\":\r\n            return {\r\n                ...state, isOwner: action.value\r\n            }\r\n        case \"SAVE-PHOTO\":\r\n            debugger\r\n            return {\r\n                ...state, profile: {...state.profile, photos: action.photos}\r\n            }\r\n        case \"SET-ERROR\":\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        case \"IS-FETCHING\":\r\n            return {\r\n                ...state, setToggle:action.value\r\n            }\r\n        case \"UPDATE-NAME\":\r\n            return {\r\n                ...state, profile:{...state.profile, fullName:action.name}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType = InferActionsType<typeof profileActions>\r\n\r\nexport const profileActions = {\r\n    addPost:(posts: string) => {\r\n        return {\r\n            type: 'ADD-POST',\r\n            posts\r\n        } as const\r\n    },\r\n    setProfile:(profile: ProfileType) => {\r\n        return {\r\n            type: 'SET-PROFILE',\r\n            profile\r\n        } as const\r\n    },\r\n    setStatus: (status: string) => {\r\n        return {\r\n            type: 'SET-STATUS',\r\n            status\r\n        } as const\r\n    },\r\n    deletePost:(id: number) => {\r\n        return {\r\n            type: 'DEL-POST',\r\n            id\r\n        } as const\r\n    },\r\n    setToggleFetching: (value: boolean) => {\r\n        return {\r\n            type: 'IS-FETCHING',\r\n            value\r\n        } as const\r\n    },\r\n    isOwner: (value: boolean) => {\r\n        return {\r\n            type: 'IS-OWNER',\r\n            value\r\n        } as const\r\n    },\r\n    successSavePhoto: (photos: ProfilePhotoType) => {\r\n        return {\r\n            type: 'SAVE-PHOTO',\r\n            photos\r\n        } as const\r\n    },\r\n    setError: (error: string) => {\r\n        return {\r\n            type: 'SET-ERROR',\r\n            error\r\n        } as const\r\n    },\r\n    updateProfilesName:(name:string)=>{\r\n        return{\r\n            type:'UPDATE-NAME',\r\n            name\r\n        }as const\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const GetProfile = (userId: number) => {\r\n    return async (dispatch: ThunkDispatch<any, any, any>) => {\r\n        dispatch(profileActions.setToggleFetching(false))\r\n        try {\r\n            const response = await profileAPI.getProfile(userId)\r\n            dispatch(profileActions.setProfile(response.data))\r\n            dispatch(profileActions.setToggleFetching(true))\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n}\r\nexport const getProfileStatus = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(profileActions.setStatus(response.data))\r\n    }\r\n}\r\nexport const updateProfileStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(profileActions.setStatus(status))\r\n        dispatch(profileActions.isOwner(true))\r\n    } else {\r\n        console.log(response.data.messages[0])\r\n    }\r\n}\r\nexport const saveUserProfile = (profile: ProfileType) => async (dispatch: ThunkDispatch<any, any, any>, getState: () => AppStateType) => {\r\n    let userId = getState().auth.data.id\r\n    let response = await profileAPI.saveProfile(profile)\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        if (userId != null) {\r\n            await dispatch(GetProfile(userId))\r\n        }\r\n    } else {\r\n        dispatch(profileActions.setError(response.data.messages[0]))\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\n\r\nexport const saveUserPhoto = (img: File) => async (dispatch: Dispatch) => {\r\n\r\n    const response = await profileAPI.savePhoto(img)\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(profileActions.successSavePhoto(response.data.data.photos))\r\n    }\r\n}\r\nexport default profileReducer"],"sourceRoot":""}