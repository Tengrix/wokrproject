{"version":3,"sources":["components/common/FormController/FormControl.module.css","components/common/FormController/FormController.tsx","components/utils/validators/validator.ts","Pics/51f6fb256629fc755b8870c801092942.png","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","TextArea","input","meta","props","TextAreaError","touched","error","className","s","formControl","InputArea","requiredField","value","maxLengthCreator","maxLength","length","ProfileStatus","useState","editMode","setEditMode","status","title","setTitle","onChange","e","currentTarget","autoFocus","onBlur","updateProfileStatus","type","onDoubleClick","isOwner","rand","Math","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","ProfileData","dispatch","useDispatch","errors","useSelector","state","profilePage","serverError","setServerError","classes","modalStyle","open","setOpen","handleClose","formik","useFormik","enableReinitialize","initialValues","userId","profile","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","contacts","vk","github","instagram","facebook","twitter","website","youtube","mainLink","photos","small","large","validate","values","onSubmit","a","saveUserProfile","setError","resetForm","body","style","handleSubmit","color","TextField","getFieldProps","Object","keys","map","key","i","disabled","isValid","onClick","Modal","onClose","aria-labelledby","aria-describedby","ProfileInfo","descriptionBlock","src","userPhoto","alt","target","files","saveUserPhoto","Preloader","Post","item","message","like","MyPosts","React","memo","messageData","el","likeCount","postsBLock","PostFormRedux","addPost","posts","reduxForm","form","action","Field","component","name","placeholder","MyPostsContainer","connect","Profile","compose","isAuth","auth","data","authorizedUserId","id","GetProfile","getProfileStatus","withRouter","myId","parseInt","match","params","isLogged","useEffect","to"],"mappings":"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","file":"static/js/5.213cc743.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__3bI51\",\"error\":\"FormControl_error__2p-ba\",\"formSummaryError\":\"FormControl_formSummaryError__2aYFp\"};","import React from 'react'\r\nimport s from './FormControl.module.css'\r\nexport const TextArea = ({input, meta, ...props}:any) => {\r\n    const TextAreaError = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + '' + (TextAreaError? s.error:'')}>\r\n            <div >\r\n                <textarea {...input}{...props} />\r\n            </div>\r\n            {TextAreaError && <span> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}\r\nexport const InputArea = ({input, meta, ...props}:any) => {\r\n    const TextAreaError = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + '' + (TextAreaError? s.error:'')}>\r\n            <input {...input} {...props}/>\r\n            {TextAreaError && <span className={s.error}> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}","\r\nexport const requiredField = (value:any) => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value:any) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n}\r\n","export default __webpack_public_path__ + \"static/media/51f6fb256629fc755b8870c801092942.22c31152.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2Y1mw\",\"contacts\":\"ProfileInfo_contacts__1ifIm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBLock\":\"MyPosts_postsBLock__2XgTU\",\"posts\":\"MyPosts_posts__2c1oP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__12Fn7\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {updateProfileStatus} from \"../../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\ntype ProfileStatusPropsType = {\r\n    status: string;\r\n    updateProfileStatus: (status:string) => void;\r\n    isOwner:boolean\r\n}\r\n\r\nfunction ProfileStatus(props: ProfileStatusPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.status);\r\n\r\n    const activateEditMode = () => {\r\n        if(props.isOwner){\r\n            setEditMode(true);\r\n            setTitle(props.status);\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.updateProfileStatus(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode ?\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'no status'}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={changeTitle} autoFocus={true} onBlur={activateViewMode} type=\"text\" value={title}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatus","import {useFormik} from \"formik\";\r\nimport {ProfileType, saveUserProfile, setError} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {makeStyles, Modal, TextField} from \"@material-ui/core\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype ContactsType = {\r\n    vk: string;\r\n    github: string;\r\n    instagram: string;\r\n    facebook: string;\r\n    twitter: string,\r\n    website: string,\r\n    youtube: string,\r\n    mainLink: string\r\n}\r\ntype PropsType = {\r\n    isOwner: boolean;\r\n    profile: ProfileType;\r\n}\r\ntype FormikErrorType = {\r\n    userId?: number;\r\n    aboutMe?: string;\r\n    fullName?: string;\r\n    lookingForAJob?: boolean;\r\n    lookingForAJobDescription?: string;\r\n    contacts: ContactsType;\r\n}\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\nconst ProfileData = (props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const errors = useSelector<AppStateType,string>(state => state.profilePage.error)\r\n    const [serverError, setServerError] = useState<string>(errors)\r\n    const classes = useStyles();\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            userId: props.profile.userId,\r\n            aboutMe: props.profile.aboutMe,\r\n            fullName: props.profile.fullName,\r\n            lookingForAJob: props.profile.lookingForAJob,\r\n            lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n            contacts: {\r\n                vk: props.profile.contacts.vk,\r\n                github: props.profile.contacts.github,\r\n                instagram: props.profile.contacts.instagram,\r\n                facebook: props.profile.contacts.facebook,\r\n                twitter: props.profile.contacts.twitter,\r\n                website: props.profile.contacts.website,\r\n                youtube: props.profile.contacts.youtube,\r\n                mainLink: props.profile.contacts.mainLink\r\n            },\r\n            photos:{\r\n                small:'',\r\n                large:''\r\n            }\r\n        },\r\n        validate: (values) => {\r\n            const errors = {} as FormikErrorType;\r\n            if (!values.aboutMe) {\r\n                errors.aboutMe = 'Required';\r\n            }\r\n            if (!values.fullName) {\r\n                errors.fullName = 'Required';\r\n            }\r\n            if (!values.lookingForAJobDescription) {\r\n                errors.lookingForAJobDescription = 'Required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values) => {\r\n            try {\r\n                await dispatch(saveUserProfile(values))\r\n                handleClose()\r\n                setServerError('')\r\n            }catch (e){\r\n                setError(e)\r\n                setServerError(e)\r\n            }\r\n            formik.resetForm();\r\n        },\r\n    })\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                {serverError && <div style={{border: \"1px solid red\", color: \"darkred\", padding: \"10px\"}}>\r\n                    {serverError}\r\n                </div>}\r\n                <div>\r\n                    <b>About Me:</b>\r\n                    <TextField type={'aboutMe'}  {...formik.getFieldProps('aboutMe')}/>\r\n                    {formik.touched.aboutMe && formik.errors.aboutMe &&\r\n                    <div style={{color: 'red'}}>{formik.errors.aboutMe}</div>}\r\n                </div>\r\n                <div>\r\n                    <b>Full name:</b>\r\n                    <input type={'fullName'} {...formik.getFieldProps('fullName')}/>\r\n                    {formik.touched.fullName && formik.errors.fullName &&\r\n                    <div style={{color: 'red'}}>{formik.errors.fullName}</div>}\r\n\r\n                </div>\r\n                <div>\r\n                    <b>Looking for job:</b>\r\n                    <input type={'checkbox'}/>\r\n                </div>\r\n                <div>\r\n                    <b>My skills:</b>\r\n                    <input type={'lookingForAJobDescription'} {...formik.getFieldProps(`lookingForAJobDescription`)}/>\r\n                    {formik.touched.lookingForAJobDescription && formik.errors.lookingForAJobDescription &&\r\n                    <div style={{color: 'red'}}>{formik.errors.lookingForAJobDescription}</div>}\r\n                </div>\r\n                <b>Contacts:</b>\r\n                {Object.keys(props.profile.contacts).map((key, i) => {\r\n                    return <div className={s.contacts} key={i}>\r\n                        <b>{key}:</b>\r\n                        <div>\r\n                            <input type={`contacts.${key}`} {...formik.getFieldProps(`contacts.${key}`)}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                })}\r\n                <button disabled={!formik.isValid} type={'submit'} color={'primary'}>save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            {props.isOwner && <button type=\"button\" onClick={handleOpen}>\r\n                update profile\r\n            </button>}\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {body}\r\n            </Modal>\r\n\r\n            <div>\r\n                <b>About me:</b> {props.profile.aboutMe}\r\n\r\n            </div>\r\n            <div>\r\n                <b>Name:</b> {props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {props.profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            <div>\r\n                <b>My Skills:</b> {props.profile.lookingForAJobDescription}\r\n            </div>\r\n            <b> Contacts:</b>\r\n            <div className={s.contacts}><b>vk:</b> {props.profile.contacts.vk}</div>\r\n            <div className={s.contacts}><b>github:</b> {props.profile.contacts.github}</div>\r\n            <div className={s.contacts}><b>youtube:</b> {props.profile.contacts.youtube}</div>\r\n            <div className={s.contacts}><b>facebook:</b> {props.profile.contacts.facebook}</div>\r\n            <div className={s.contacts}><b>website:</b> {props.profile.contacts.website}</div>\r\n            <div className={s.contacts}><b>mainLink:</b> {props.profile.contacts.mainLink}</div>\r\n            <div className={s.contacts}><b>instagram:</b> {props.profile.contacts.instagram}</div>\r\n            <div className={s.contacts}><b>twitter:</b> {props.profile.contacts.twitter}</div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileData;","import React, {ChangeEvent} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfilePhotoType, ProfileType, saveUserProfile, setError} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from './ProfileStatus'\r\nimport userPhoto from './../../../Pics/51f6fb256629fc755b8870c801092942.png'\r\nimport ProfileData from \"./ProfileData\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string;\r\n    updateProfileStatus: (status: string) => void;\r\n    photos: ProfilePhotoType\r\n    saveUserPhoto: (img: File) => void\r\n    isOwner:boolean;\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoType) {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            props.saveUserPhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={props.photos.large || userPhoto} alt=\"profile pic\"/>\r\n                    {props.isOwner&&<input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                    <ProfileStatus status={props.status}\r\n                                   updateProfileStatus={props.updateProfileStatus}\r\n                                   isOwner={props.isOwner}\r\n                    />\r\n                </div>\r\n                <ProfileData isOwner={props.isOwner}\r\n                             profile={props.profile}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\n\nimport s from './Post.module.css';\n\ntype PostPropsType={\n    message: string\n    like:number\n}\n\nfunction Post(props:PostPropsType) {\n    return (\n        <div >\n            <div className={s.item}>\n                <img src=\"https://lwlies.com/wp-content/uploads/2017/04/avatar-2009.jpg\" alt=\"\"/>\n                {props.message}\n                <div>\n                    <span>\n                        {props.like}\n                        <button>like</button>\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Posts from \"./Post/Post\";\nimport {ProfilePropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps} from \"redux-form\";\nimport {reduxForm} from \"redux-form\";\nimport { maxLengthCreator, requiredField} from \"../../utils/validators/validator\";\nimport {TextArea} from \"../../common/FormController/FormController\";\nlet maxLength = maxLengthCreator(99)\n\nconst MyPosts = React.memo((props: ProfilePropsType) => {\n\n    let messageData = props.message.map((el,i) => <Posts key={i} message={el.message} like={el.likeCount}/>)\n    let addPost = (value:any) => {\n        props.addPost(value.posts)\n    }\n    return (\n\n        <div className={s.postsBLock}>\n            <h3>My posts</h3>\n            <div>\n                <PostFormRedux onSubmit={addPost}/>\n            </div>\n            <div className={s.posts}>\n                {messageData}\n            </div>\n        </div>\n    );\n});\n\nconst PostForm: React.FC<InjectedFormProps<string>> = (props) => {\n    return (\n        <form action=\"\" onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={TextArea} name={'posts'} placeholder={'Enter some posts'}\n                    validate={[requiredField, maxLength]}\n                />\n            </div>\n            <div>\n                <button>add new post</button>\n            </div>\n        </form>\n    )\n}\nexport default MyPosts;\nexport const PostFormRedux = reduxForm<string>({form: 'posts'})(PostForm)","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {addPost, messageType} from \"../../../redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    message: messageType[];\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost:(posts:string) => void;\r\n}\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state:AppStateType): MapStateToPropsType => {\r\n    return{\r\n        message: state.profilePage.message,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch:Dispatch) :MapDispatchToPropsType => {\r\n    return{\r\n        addPost: (posts:string) => {\r\n            dispatch(addPost(posts))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePhotoType, ProfileType} from \"../../redux/profile-reducer\";\r\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    photos:ProfilePhotoType\r\n    saveUserPhoto:(img:File)=>void\r\n    isOwner:boolean;\r\n    status:string\r\n}\r\n\r\ntype MainProfilePropsType = ProfilePropsType & ProfileContainerPropsType\r\nfunction Profile({profile,updateProfileStatus,photos,saveUserPhoto,status,isOwner}: MainProfilePropsType) {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                status={status}\r\n                profile={profile}\r\n                updateProfileStatus={updateProfileStatus}\r\n                photos={photos}\r\n                saveUserPhoto={saveUserPhoto}\r\n                isOwner={isOwner}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React, {useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    GetProfile,\r\n    getProfileStatus,\r\n    ProfilePhotoType,\r\n    ProfileType, saveUserPhoto,\r\n    updateProfileStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {compose} from 'redux'\r\nimport {withRouter} from \"react-router\";\r\nimport {Redirect, RouteComponentProps, useParams} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\ntype MapStateToPropsType = {\r\n    photos: ProfilePhotoType\r\n    profile: ProfileType | null;\r\n    status: string;\r\n    isAuth: boolean;\r\n    authorizedUserId: number | null;\r\n}\r\ntype MapStateDispatchToPropsType = {\r\n    GetProfile: (userId: number) => void;\r\n    getProfileStatus: (userId: number) => void;\r\n    updateProfileStatus: (status: string) => void;\r\n    saveUserPhoto: (img: File) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapStateDispatchToPropsType\r\nexport type PropsType = ProfileContainerPropsType & RouteComponentProps<PathParamsType>\r\n\r\nconst ProfileContainer = (props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    let myId = useSelector<AppStateType, number | null>(state => state.auth.data.id)\r\n    let id = parseInt(props.match.params.userId)\r\n    const isLogged = useSelector<AppStateType, boolean>(state => state.auth.data.isAuth)\r\n\r\n    useEffect(() => {\r\n        if(isLogged){\r\n            if (!id && myId != null) {\r\n                props.GetProfile(myId)\r\n                dispatch(getProfileStatus(myId))\r\n\r\n            } else {\r\n                props.GetProfile(id)\r\n                dispatch(getProfileStatus(id))\r\n            }\r\n        }\r\n    }, [id, myId])\r\n    if(!isLogged){\r\n        return <div> <Redirect to={'/login'}/> </div>\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <Profile {...props}\r\n                     profile={props.profile}\r\n                     GetProfile={props.GetProfile}\r\n                     status={props.status}\r\n                     getProfileStatus={props.getProfileStatus}\r\n                     updateProfileStatus={props.updateProfileStatus}\r\n                     isAuth={props.isAuth}\r\n                     authorizedUserId={props.authorizedUserId}\r\n                     photos={props.photos}\r\n                     saveUserPhoto={props.saveUserPhoto}\r\n                     isOwner={!id}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        isAuth: state.auth.data.isAuth,\r\n        authorizedUserId: state.auth.data.id,\r\n        photos: state.profilePage.profile.photos\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n        {GetProfile, getProfileStatus, updateProfileStatus, saveUserPhoto}),\r\n    withRouter) //withAuthRedirectComponent\r\n    (ProfileContainer)"],"sourceRoot":""}