{"version":3,"sources":["components/common/FormController/FormControl.module.css","components/common/FormController/FormController.tsx","components/utils/validators/validator.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","TextArea","input","meta","props","TextAreaError","touched","error","className","s","formControl","InputArea","requiredField","value","maxLengthCreator","maxLength","length","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","ProfileStatus","dispatch","useDispatch","useState","editMode","setEditMode","status","title","setTitle","useEffect","updateProfileStatus","onChange","e","currentTarget","autoFocus","onBlur","type","onDoubleClick","ProfileInfo","profile","descriptionBlock","fullName","src","photos","small","alt","contacts","vk","github","facebook","twitter","website","instagram","lookingForAJob","lookingForAJobDescription","Preloader","Post","item","message","like","MyPosts","React","memo","messageData","map","el","likeCount","console","log","postsBLock","PostFormRedux","onSubmit","addPost","posts","reduxForm","form","action","handleSubmit","Field","component","name","placeholder","validate","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","GetProfile","getProfileStatus","isAuth","Component","compose","auth","data","id","withRouter"],"mappings":"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","file":"static/js/4.2aaab5f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__3bI51\",\"error\":\"FormControl_error__2p-ba\",\"formSummaryError\":\"FormControl_formSummaryError__2aYFp\"};","import React from 'react'\r\nimport s from './FormControl.module.css'\r\nexport const TextArea = ({input, meta, ...props}:any) => {\r\n    const TextAreaError = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + '' + (TextAreaError? s.error:'')}>\r\n            <div >\r\n                <textarea {...input}{...props} />\r\n            </div>\r\n            {TextAreaError && <span> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}\r\nexport const InputArea = ({input, meta, ...props}:any) => {\r\n    const TextAreaError = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + '' + (TextAreaError? s.error:'')}>\r\n            <input {...input} {...props}/>\r\n            {TextAreaError && <span className={s.error}> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}","\r\nexport const requiredField = (value:any) => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value:any) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n}\r\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2Y1mw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBLock\":\"MyPosts_postsBLock__2XgTU\",\"posts\":\"MyPosts_posts__2c1oP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__12Fn7\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateProfileStatus} from \"../../../redux/profile-reducer\";\r\ntype ProfileStatusPropsType = {\r\n    status: string;\r\n    updateProfileStatus: (status:string) => void;\r\n}\r\n\r\nfunction ProfileStatus(props: ProfileStatusPropsType) {\r\n    const dispatch = useDispatch()\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.status);\r\n    useEffect(() =>{\r\n         dispatch(updateProfileStatus(title))\r\n    },[props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.status);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.updateProfileStatus(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode ?\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'no status'}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={changeTitle} autoFocus={true} onBlur={activateViewMode} type=\"text\" value={title}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatus","import React from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from './ProfileStatus'\r\ntype ProfileInfoType = {\r\n    profile:ProfileType\r\n    status: string;\r\n    updateProfileStatus: (status:string) => void;\r\n}\r\n\r\nfunction ProfileInfo(props:ProfileInfoType){\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            {/*<div>*/}\r\n            {/*    <img src={props.pic}/>*/}\r\n            {/*</div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <p>\r\n                    {props.profile.fullName}\r\n                </p>\r\n                <div>\r\n                    <img src={props.profile.photos.small} alt=\"\"/>\r\n                    <ProfileStatus status={props.status} updateProfileStatus={props.updateProfileStatus} />\r\n                </div>\r\n\r\n                <span> Я будущий спец в IT-INDUSTRY</span>\r\n                <div>\r\n                    <div>{props.profile.contacts.vk} </div>\r\n                    <div>{props.profile.contacts.github} </div>\r\n                    <div>{props.profile.contacts.facebook}</div>\r\n                    <div>{props.profile.contacts.twitter} </div>\r\n                    <div>{props.profile.contacts.website} </div>\r\n                    <div>{props.profile.contacts.instagram} </div>\r\n                </div>\r\n                <div>\r\n                    {props.profile.lookingForAJob}\r\n                </div>\r\n                <div>\r\n                    {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo","import React from 'react';\n\nimport s from './Post.module.css';\n\ntype PostPropsType={\n    message: string\n    like:number\n}\n\nfunction Post(props:PostPropsType) {\n    return (\n        <div >\n            <div className={s.item}>\n                <img src=\"https://lwlies.com/wp-content/uploads/2017/04/avatar-2009.jpg\" alt=\"\"/>\n                {props.message}\n                <div>\n                    <span>\n                        {props.like}\n                        <button>like</button>\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Posts from \"./Post/Post\";\nimport {ProfilePropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps} from \"redux-form\";\nimport {reduxForm} from \"redux-form\";\nimport { maxLengthCreator, requiredField} from \"../../utils/validators/validator\";\nimport {TextArea} from \"../../common/FormController/FormController\";\nlet maxLength = maxLengthCreator(99)\n\nconst MyPosts = React.memo((props: ProfilePropsType) => {\n\n    let messageData = props.message.map(el => <Posts message={el.message} like={el.likeCount}/>)\n    let addPost = (value:any) => {\n        props.addPost(value.posts)\n    }\n    console.log('ds')\n    return (\n\n        <div className={s.postsBLock}>\n            <h3>My posts</h3>\n            <div>\n                <PostFormRedux onSubmit={addPost}/>\n            </div>\n            <div className={s.posts}>\n                {messageData}\n            </div>\n        </div>\n    );\n});\n\nconst PostForm: React.FC<InjectedFormProps<string>> = (props) => {\n    return (\n        <form action=\"\" onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={TextArea} name={'posts'} placeholder={'Enter some posts'}\n                    validate={[requiredField, maxLength]}\n                />\n            </div>\n            <div>\n                <button>add new post</button>\n            </div>\n        </form>\n    )\n}\nexport default MyPosts;\nexport const PostFormRedux = reduxForm<string>({form: 'posts'})(PostForm)","import React from 'react';\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {addPost, messageType} from \"../../../redux/profile-reducer\";\nimport {Dispatch} from \"redux\";\n\ntype MapStateToPropsType = {\n    message: messageType[];\n}\n\ntype MapDispatchToPropsType = {\n    addPost:(posts:string) => void;\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state:AppStateType): MapStateToPropsType => {\n    return{\n        message: state.profilePage.message,\n    }\n}\nconst mapDispatchToProps = (dispatch:Dispatch) :MapDispatchToPropsType => {\n    return{\n        addPost: (posts:string) => {\n            dispatch(addPost(posts))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;\n","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/profile-reducer\";\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType\n    status: string\n    updateProfileStatus:(status:string) => void;\n}\ntype MainProfilePropsType = ProfilePropsType & ProfileContainerPropsType\n\nfunction Profile({profile,status,updateProfileStatus}: MainProfilePropsType) {\n    return (\n        <div>\n            <ProfileInfo\n                profile={profile}\n                status={status}\n                updateProfileStatus={updateProfileStatus}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\nexport default Profile;\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {GetProfile, getProfileStatus, ProfileType, updateProfileStatus} from \"../../redux/profile-reducer\";\r\nimport {compose} from 'redux'\r\nimport {withRouter} from \"react-router\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null;\r\n    status: string;\r\n    isAuth:boolean;\r\n    authorizedUserId:number | null;\r\n}\r\ntype MapStateDispatchToPropsType = {\r\n    GetProfile: (userId: number) => void;\r\n    getProfileStatus: (userId: number) => void;\r\n    updateProfileStatus: (status: string) => void;\r\n}\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapStateDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component <any, any> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n        this.props.GetProfile(userId)\r\n        this.props.getProfileStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     GetProfile={this.props.GetProfile}\r\n                     status={this.props.status}\r\n                     getProfileStatus={this.props.getProfileStatus}\r\n                     updateProfileStatus={this.props.updateProfileStatus}\r\n                     isAuth={this.props.isAuth}\r\n                     authorizedUserId={this.props.authorizedUserId}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        isAuth:state.auth.data.isAuth,\r\n        authorizedUserId: state.auth.data.id\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n    {GetProfile, getProfileStatus, updateProfileStatus}),\r\n    withRouter) //withAuthRedirectComponent\r\n    (ProfileContainer)"],"sourceRoot":""}