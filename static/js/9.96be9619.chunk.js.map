{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","React","memo","props","useState","editMode","setEditMode","status","title","setTitle","onChange","e","currentTarget","value","autoFocus","onBlur","isAuth","updateProfileStatus","type","onDoubleClick","isOwner","rand","Math","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","ProfileData","dispatch","useDispatch","errors","useSelector","state","profilePage","error","serverError","setServerError","classes","modalStyle","open","setOpen","handleClose","formik","useFormik","enableReinitialize","initialValues","userId","profile","aboutMe","fullName","lookingForAJob","lookingForAJobDescription","contacts","vk","github","instagram","facebook","twitter","website","youtube","mainLink","photos","small","large","validate","values","onSubmit","a","saveUserProfile","profileActions","setError","resetForm","body","style","className","handleSubmit","color","TextField","getFieldProps","touched","Object","keys","map","key","i","s","disabled","isValid","console","log","onClick","Modal","onClose","aria-labelledby","aria-describedby","ProfileInfo","auth","data","Preloader","descriptionBlock","size","xs","sm","md","lg","xl","xxl","icon","AntDesignOutlined","src","userPhoto","alt","target","files","saveUserPhoto","Profile","img","ProfileContainer","myId","id","useParams","setToggle","isLogged","useEffect","GetProfile","Number","getProfileStatus"],"mappings":"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","file":"static/js/9.96be9619.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2Y1mw\",\"contacts\":\"ProfileInfo_contacts__1ifIm\"};","import React, {ChangeEvent, useState} from 'react'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string;\r\n    updateProfileStatus: (status:string) => void;\r\n    isOwner:boolean;\r\n    isAuth:boolean;\r\n}\r\n\r\nconst ProfileStatus = React.memo((props: ProfileStatusPropsType) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.status);\r\n\r\n    const activateEditMode = () => {\r\n        if(props.isOwner && props.isAuth){\r\n            setEditMode(true);\r\n            setTitle(props.status);\r\n        }\r\n    }\r\n    const activateViewMode = () => {\r\n        if(props.isAuth){\r\n            setEditMode(false);\r\n            props.updateProfileStatus(title);\r\n        }\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode ?\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'no status'}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={changeTitle} autoFocus={true} onBlur={activateViewMode} type=\"text\" value={title}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nexport default ProfileStatus","import {useFormik} from \"formik\";\r\nimport {profileActions, ProfileType, saveUserProfile} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport React, {useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {makeStyles, Modal, TextField} from \"@material-ui/core\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype ContactsType = {\r\n    vk: string;\r\n    github: string;\r\n    instagram: string;\r\n    facebook: string;\r\n    twitter: string,\r\n    website: string,\r\n    youtube: string,\r\n    mainLink: string\r\n}\r\ntype PropsType = {\r\n    isOwner: boolean;\r\n    profile: ProfileType;\r\n    isAuth:boolean;\r\n}\r\ntype FormikErrorType = {\r\n    userId?: number;\r\n    aboutMe?: string;\r\n    fullName?: string;\r\n    lookingForAJob?: boolean;\r\n    lookingForAJobDescription?: string;\r\n    contacts: ContactsType;\r\n}\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\nconst ProfileData = React.memo((props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const errors = useSelector<AppStateType,string>(state => state.profilePage.error)\r\n    const [serverError, setServerError] = useState<string>(errors)\r\n    const classes = useStyles();\r\n    const [modalStyle] = useState(getModalStyle);\r\n    const [open, setOpen] = useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            userId: props.profile.userId,\r\n            aboutMe: props.profile.aboutMe,\r\n            fullName: props.profile.fullName,\r\n            lookingForAJob: props.profile.lookingForAJob,\r\n            lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n            contacts: {\r\n                vk: props.profile.contacts.vk,\r\n                github: props.profile.contacts.github,\r\n                instagram: props.profile.contacts.instagram,\r\n                facebook: props.profile.contacts.facebook,\r\n                twitter: props.profile.contacts.twitter,\r\n                website: props.profile.contacts.website,\r\n                youtube: props.profile.contacts.youtube,\r\n                mainLink: props.profile.contacts.mainLink\r\n            },\r\n            photos:{\r\n                small:'',\r\n                large:''\r\n            }\r\n        },\r\n        validate: (values) => {\r\n            const errors = {} as FormikErrorType;\r\n            if (!values.aboutMe) {\r\n                errors.aboutMe = 'Required';\r\n            }\r\n            if (!values.fullName) {\r\n                errors.fullName = 'Required';\r\n            }\r\n            if (!values.lookingForAJobDescription) {\r\n                errors.lookingForAJobDescription = 'Required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values) => {\r\n            try {\r\n                await dispatch(saveUserProfile(values))\r\n                handleClose()\r\n                setServerError('')\r\n            }catch (e:any){\r\n                profileActions.setError(e)\r\n                setServerError(e)\r\n            }\r\n            formik.resetForm();\r\n        },\r\n    })\r\n    const body = (\r\n        <div style={modalStyle} className={classes.paper}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                {serverError && <div style={{border: \"1px solid red\", color: \"darkred\", padding: \"10px\"}}>\r\n                    {serverError}\r\n                </div>}\r\n                <div>\r\n                    <b>About Me:</b>\r\n                    <TextField type={'aboutMe'}  {...formik.getFieldProps('aboutMe')}/>\r\n                    {formik.touched.aboutMe && formik.errors.aboutMe &&\r\n                    <div style={{color: 'red'}}>{formik.errors.aboutMe}</div>}\r\n                </div>\r\n                <div>\r\n                    <b>Full name:</b>\r\n                    <input type={'fullName'} {...formik.getFieldProps('fullName')}/>\r\n                    {formik.touched.fullName && formik.errors.fullName &&\r\n                    <div style={{color: 'red'}}>{formik.errors.fullName}</div>}\r\n\r\n                </div>\r\n                <div>\r\n                    <b>Looking for job:</b>\r\n                    <input type={'checkbox'}/>\r\n                </div>\r\n                <div>\r\n                    <b>My skills:</b>\r\n                    <input type={'lookingForAJobDescription'} {...formik.getFieldProps(`lookingForAJobDescription`)}/>\r\n                    {formik.touched.lookingForAJobDescription && formik.errors.lookingForAJobDescription &&\r\n                    <div style={{color: 'red'}}>{formik.errors.lookingForAJobDescription}</div>}\r\n                </div>\r\n                <b>Contacts:</b>\r\n                {Object.keys(props.profile.contacts).map((key, i) => {\r\n                    return <div className={s.contacts} key={i}>\r\n                        <b>{key}:</b>\r\n                        <div>\r\n                            <input type={`contacts.${key}`} {...formik.getFieldProps(`contacts.${key}`)}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                })}\r\n                <button disabled={!formik.isValid} type={'submit'} color={'primary'}>save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n    console.log(props.isAuth, props.isOwner)\r\n    return (\r\n        <div>\r\n            {props.isOwner && <button type=\"button\" disabled={!props.isAuth} onClick={handleOpen}>\r\n                update profile\r\n            </button>}\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {body}\r\n            </Modal>\r\n\r\n            <div>\r\n                <b>About me:</b> {props.profile.aboutMe}\r\n\r\n            </div>\r\n            <div>\r\n                <b>Name:</b> {props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {props.profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            <div>\r\n                <b>My Skills:</b> {props.profile.lookingForAJobDescription}\r\n            </div>\r\n            <b> Contacts:</b>\r\n            <div className={s.contacts}><b>vk:</b> {props.profile.contacts.vk}</div>\r\n            <div className={s.contacts}><b>github:</b> {props.profile.contacts.github}</div>\r\n            <div className={s.contacts}><b>youtube:</b> {props.profile.contacts.youtube}</div>\r\n            <div className={s.contacts}><b>facebook:</b> {props.profile.contacts.facebook}</div>\r\n            <div className={s.contacts}><b>website:</b> {props.profile.contacts.website}</div>\r\n            <div className={s.contacts}><b>mainLink:</b> {props.profile.contacts.mainLink}</div>\r\n            <div className={s.contacts}><b>instagram:</b> {props.profile.contacts.instagram}</div>\r\n            <div className={s.contacts}><b>twitter:</b> {props.profile.contacts.twitter}</div>\r\n\r\n        </div>\r\n    )\r\n})\r\nexport default ProfileData;","import React, {ChangeEvent} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfilePhotoType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from './ProfileStatus'\r\nimport userPhoto from './../../../Pics/51f6fb256629fc755b8870c801092942.png'\r\nimport ProfileData from \"./ProfileData\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Avatar} from \"antd\";\r\nimport { AntDesignOutlined } from '@ant-design/icons';\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string;\r\n    updateProfileStatus: (status: string) => void;\r\n    photos: ProfilePhotoType\r\n    saveUserPhoto: (img: File) => void\r\n    isOwner:boolean;\r\n}\r\n\r\nconst ProfileInfo = React.memo((props: ProfileInfoType) => {\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.auth.data.isAuth)\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            props.saveUserPhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <Avatar size={{ xs: 24, sm: 32, md: 40, lg: 64, xl: 80, xxl: 100 }}\r\n                            icon={<AntDesignOutlined />} src={props.photos.large || userPhoto} alt=\"profile pic\"/>\r\n                    {props.isOwner&&<input type=\"file\" disabled={!isAuth} onChange={onMainPhotoSelected}/>}\r\n                    <ProfileStatus status={props.status}\r\n                                   updateProfileStatus={props.updateProfileStatus}\r\n                                   isOwner={props.isOwner}\r\n                                   isAuth={isAuth}\r\n\r\n                    />\r\n                </div>\r\n                <ProfileData isOwner={props.isOwner}\r\n                             profile={props.profile}\r\n                             isAuth={isAuth}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {profileInitialStateType, saveUserPhoto, updateProfileStatus} from \"../../redux/profile-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nconst Profile = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const {status,profile,isOwner} = useSelector<AppStateType,profileInitialStateType>(state => state.profilePage)\r\n    const updateStatus = (status:string) => {\r\n        dispatch(updateProfileStatus(status))\r\n    }\r\n    const savePhoto = (img:File) =>{\r\n        dispatch(saveUserPhoto(img))\r\n    }\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                status={status}\r\n                profile={profile}\r\n                updateProfileStatus={updateStatus}\r\n                photos={profile.photos}\r\n                saveUserPhoto={savePhoto}\r\n                isOwner={isOwner}\r\n            />\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Profile;\r\n","import React, {useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {GetProfile, getProfileStatus, profileActions} from \"../../redux/profile-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\n\r\nconst ProfileContainer = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n    let myId = useSelector<AppStateType, number | null>(state => state.auth.data.id)\r\n    let {userId} = useParams<{ userId:string }>()\r\n    const setToggle = useSelector<AppStateType, boolean>(state => state.profilePage.setToggle)\r\n    const isLogged = useSelector<AppStateType, boolean>(state => state.auth.data.isAuth)\r\n\r\n    useEffect(() => {\r\n        if (isLogged) {\r\n            if (!userId && myId != null) {\r\n                dispatch(GetProfile(myId))\r\n                dispatch(getProfileStatus(myId))\r\n                dispatch(profileActions.isOwner(true))\r\n            } else {\r\n                dispatch(GetProfile(Number(userId)))\r\n                dispatch(getProfileStatus(Number(userId)))\r\n                dispatch(profileActions.isOwner(false))\r\n            }\r\n        }\r\n    }, [userId, myId])\r\n    // if(!isLogged){\r\n    //     return <div> <Redirect to={'/login'}/> </div>\r\n    // }\r\n    return (\r\n        <div>\r\n            {!setToggle ? <Preloader/> :\r\n                <Profile/>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ProfileContainer"],"sourceRoot":""}