{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItems/DialogItems.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Users/UsersApiComponent.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","redux/profile-reducer.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Friends/Friends.tsx","components/Dialogs/DialogItems/DialogItems.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","redux/dialog-reducer.tsx","components/Dialogs/DialogsContainer.tsx","redux/users-reducer.ts","components/Users/Users.tsx","Pics/Iphone-spinner-2.gif","components/common/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","App.tsx","redux/friends-reducer.tsx","redux/redux-store.ts","index.tsx"],"names":["module","exports","Header","className","s","header","src","alt","Navbar","nav","item","to","activeClassName","activeLink","itemFriends","ProfileInfo","props","pic","descriptionBlock","Post","message","like","MyPosts","messageData","map","el","likeCount","postsBLock","value","newPostText","onChange","e","changeNewText","currentTarget","onClick","addPost","posts","ADD_POST","CHANGE_NEW_POST_TEXT","initialState","id","profileReducer","state","action","type","newPost","MyPostsContainer","connect","profilePage","dispatch","text","Profile","News","Music","Settings","Friends","DialogItems","dialog","active","img","name","Message","chat","messages","Dialogs","usersData","users","messagesData","createMessageBody","newMessageBody","dialogs","dialogsItems","placeholder","updatedMessageBody","sendMessage","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","dialogReducer","body","DialogsContainer","dialogPage","pageCount","totalUsersCount","currentPage","isFetching","usersReducer","userId","followed","pageNumber","Users","pagesCount","Math","ceil","pages","i","push","selectedPage","onPageChanged","photoUrl","follow","unfollow","status","Preloader","preloader","UsersAPIComponent","setCurrentPage","setToggleFetching","axios","get","then","response","setUser","data","items","this","setTotalUsersCount","totalCount","React","Component","UsersContainer","usersPage","App","path","render","component","friends","friendsReducer","rootReducer","combineReducers","sideBarPage","store","createStore","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.de4d3ca3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__IcOa7\",\"messages\":\"Dialogs_messages__2ipxb\",\"message\":\"Dialogs_message__2cCpI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogItems_dialogsItems__2fZHv\",\"active\":\"DialogItems_active__2ISGM\",\"img\":\"DialogItems_img__3cAL3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBLock\":\"MyPosts_postsBLock__2XgTU\",\"posts\":\"MyPosts_posts__2c1oP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"UsersApiComponent_img__hQbIU\",\"selectedPage\":\"UsersApiComponent_selectedPage__2oxjD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3kPns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2Y1mw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__12Fn7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2LvmE\",\"item\":\"Navbar_item__3Z4YA\",\"activeLink\":\"Navbar_activeLink__E3EjW\",\"itemFriends\":\"Navbar_itemFriends__ukrFy\"};","import React from 'react';\n\nimport s from './Header.module.css';\n\nfunction Header() {\n  return (\n    <header className={s.header}>\n      <img src=\"https://www.freelogodesign.org/Content/img/logo-ex-7.png\" alt=\"\"/>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Navbar.module.css';\n\ntype NavbarType = {\n\n}\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={`${s.item}`}>\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\n            </div>\n            <div className={s.itemFriends}>\n                <NavLink to='/friends' activeClassName={s.activeLink}>Friends</NavLink>\n            </div>\n            <span className={s.itemFriends}>\n                <NavLink to='/Abay' activeClassName={s.activeLink}> Abay </NavLink>\n            </span>\n            <span className={s.itemFriends}>\n                <NavLink to='/Salta' activeClassName={s.activeLink}> Salta </NavLink>\n            </span>\n            <span className={s.itemFriends}>\n                <NavLink to='/Samal' activeClassName={s.activeLink}> Samal </NavLink>\n            </span>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react'\r\nimport s from './ProfileInfo.module.css'\r\ntype ProfileInfoType = {\r\n    pic:string;\r\n}\r\n\r\nfunction ProfileInfo(props:ProfileInfoType){\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src={props.pic}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo","import React from 'react';\n\nimport s from './Post.module.css';\n\ntype PostPropsType={\n    message: string\n    like:number\n}\n\nfunction Post(props:PostPropsType) {\n    return (\n        <div >\n            <div className={s.item}>\n                <img src=\"https://lwlies.com/wp-content/uploads/2017/04/avatar-2009.jpg\" alt=\"\"/>\n                {props.message}\n                <div>\n                    <span>\n                        {props.like}\n                        <button>like</button>\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;\n","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css';\nimport Posts from \"./Post/Post\";\nimport {ProfilePropsType} from \"./MyPostsContainer\";\n\n\nfunction MyPosts(props: ProfilePropsType) {\n\n    let messageData = props.message.map(el => <Posts message={el.message} like={el.likeCount}/>)\n    let addPost = () => {\n        props.addPost()\n    }\n    let addPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.changeNewText(e.currentTarget.value)\n    }\n    return (\n        <div className={s.postsBLock}>\n            <h3>My posts</h3>\n            <div>\n                <div>\n                    <textarea value={props.newPostText} onChange={addPostChange}/>\n                </div>\n                <div>\n                    <button onClick={addPost}>add new post</button>\n                </div>\n            </div>\n            <div className={s.posts}>\n\n                {messageData}\n\n            </div>\n        </div>\n    );\n}\n\nexport default MyPosts;\n","\r\ntype ActionsTypesF =\r\n    ReturnType<typeof addPostAC> |\r\n    ReturnType<typeof changeNewTextAC>\r\nexport const ADD_POST = 'ADD-POST'\r\nexport const CHANGE_NEW_POST_TEXT = 'CHANGE-NEW-POST-TEXT'\r\nexport const addPostAC = () => {\r\n    return {\r\n        type: ADD_POST,\r\n    } as const\r\n}\r\nexport const changeNewTextAC = (newPost: string) => {\r\n    return {\r\n        type: CHANGE_NEW_POST_TEXT,\r\n        newPost: newPost\r\n    } as const\r\n}\r\nexport type messageType = {\r\n    message: string;\r\n    likeCount: number;\r\n    id: number\r\n}\r\n\r\nexport type InitialStateType = {\r\n    message: messageType[];\r\n    newPostText: string;\r\n}\r\n\r\nlet initialState : InitialStateType = {\r\n    message: [\r\n        {id: 1, message: 'Hi, how are you?', likeCount: 22},\r\n        {id: 2, message: 'It is my first post', likeCount: 11},\r\n\r\n    ]as messageType[] ,\r\n    newPostText: ''\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsTypesF): InitialStateType => {\r\n    switch (action.type){\r\n        case ADD_POST:{\r\n            const newPost: messageType = {\r\n                id: 3,\r\n                message: state.newPostText,\r\n                likeCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                message: [...state.message, newPost],\r\n                newPostText: ''\r\n            };\r\n        }\r\n        case CHANGE_NEW_POST_TEXT:{\r\n            return{\r\n                ...state,\r\n                newPostText:action.newPost\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default profileReducer","import React from 'react';\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {addPostAC, changeNewTextAC, messageType} from \"../../../redux/profile-reducer\";\nimport {Dispatch} from \"redux\";\n\ntype MapStateToPropsType = {\n    message: messageType[];\n    newPostText: string;\n}\n\ntype MapDispatchToPropsType = {\n    changeNewText: (text: string) => void;\n    addPost:() => void;\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state:AppStateType): MapStateToPropsType => {\n    return{\n        message: state.profilePage.message,\n        newPostText: state.profilePage.newPostText\n\n    }\n}\nconst mapDispatchToProps = (dispatch:Dispatch) :MapDispatchToPropsType => {\n    return{\n        changeNewText: (text:string) => {\n            dispatch(changeNewTextAC(text))\n        },\n        addPost: () => {\n            dispatch(addPostAC())\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;\n","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\nfunction Profile() {\n    return (\n        <div>\n            <ProfileInfo\n                pic={'https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'}/>\n            <MyPostsContainer />\n        </div>\n    );\n}\n\nexport default Profile;\n","import React from 'react'\r\nimport s from './News.module.css'\r\nfunction News(props:any){\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\nexport default News","import React from 'react'\r\nfunction Music(props:any){\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music","import React from 'react'\r\nimport s from './Settings.module.css'\r\nfunction Settings(props:any){\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings","import React from 'react'\r\nimport s from './Friends.module.css'\r\nfunction Friends(props:any){\r\n    return (\r\n        <div>\r\n            Friends\r\n        </div>\r\n    )\r\n}\r\nexport default Friends","import React from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from \"./DialogItems.module.css\";\r\n\r\ntype DialogItemsTypes = {\r\n    name:string\r\n    id:string\r\n}\r\n\r\nfunction DialogItems(props:DialogItemsTypes) {\r\n\r\n    return (\r\n        <div>\r\n            <div className={`${s.dialog} ${s.active}`}>\r\n                <img className={s.img} src=\"https://media.vanityfair.com/photos/5c5325d3cec32271820c6fc1/master/w_1600%2Cc_limit/ava-max-interview.jpg\" alt=\"\"/>\r\n                <NavLink to={'/dialogs/'+props.id}>{props.name}</NavLink>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItems","import React from 'react'\r\nimport s from \"./Message.module.css\";\r\n\r\ntype setMessageType = {\r\n    messages: string;\r\n    id: number;\r\n}\r\n\r\nfunction Message(props: setMessageType) {\r\n    return (\r\n        <div>\r\n            <div className={s.message}>\r\n                <div className={s.chat}>\r\n                    {props.messages}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React, {ChangeEvent} from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItems from \"./DialogItems/DialogItems\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\n\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n\r\n    let usersData = props.users.map(el => <DialogItems\r\n        name={el.name}\r\n        id={el.id}\r\n    />)\r\n    let messagesData = props.messages.map(el => <Message\r\n        messages={el.messages}\r\n        id={el.id}\r\n    />)\r\n    let createMessageBody = props.newMessageBody\r\n    let onNewMessageClick = () => {\r\n        props.sendMessage()\r\n    }\r\n    let onSendMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updatedMessageBody(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n\r\n                {usersData}\r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                <div> {messagesData}</div>\r\n                <div>\r\n                    <div><textarea\r\n                        value={createMessageBody}\r\n                        placeholder={'Enter your message'}\r\n                        onChange={onSendMessageChange}\r\n                    ></textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={onNewMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","type ActionsTypesF =\r\n    ReturnType<typeof newMessageBodyAC> |\r\n    ReturnType<typeof sendMessageAC>\r\n\r\nexport const UPDATE_NEW_MESSAGE_BODY = 'NEW-MESSAGE-BODY'\r\nexport const SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\nexport type messagesType = {\r\n    id: number;\r\n    messages: string;\r\n}\r\nexport type userType = {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\n\r\nexport type InitialStateType = {\r\n    users: userType[]\r\n    messages: messagesType[]\r\n    newMessageBody: string\r\n}\r\nlet initialState: InitialStateType = {\r\n    users: [\r\n        {id: '1', name: 'Damir'},\r\n        {id: '2', name: 'Abay'},\r\n        {id: '3', name: 'Kyama'},\r\n        {id: '4', name: 'Kaidar'},\r\n        {id: '5', name: 'Aday'},\r\n\r\n    ] as userType[],\r\n    messages: [\r\n        {id: 1, messages: 'Hi'},\r\n        {id: 2, messages: 'What\\'s up?'},\r\n        {id: 3, messages: 'How\\'s it going?'},\r\n\r\n    ] as messagesType[],\r\n    newMessageBody: ''\r\n}\r\n\r\nexport const dialogReducer = (state: InitialStateType = initialState, action: ActionsTypesF):InitialStateType => {\r\n    switch (action.type){\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            }\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id:6, messages: body} ],\r\n                newMessageBody: ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const newMessageBodyAC= (body: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_BODY,\r\n        body: body\r\n    } as const\r\n\r\n}\r\nexport const sendMessageAC = () => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    } as const\r\n\r\n}\r\n// type dialogReducerAT = sendMessageAType|updateMessageAT\r\n// export type sendMessageAType = {\r\n//     type:'SEND-MESSAGE'\r\n//     id: number;\r\n//     title: string;\r\n// }\r\n// export type updateMessageAT = {\r\n//     type: 'NEW-MESSAGE-BODY'\r\n//     body: string\r\n// }\r\n// export const sendMessageAC = (id:number, title:string):sendMessageAType => {\r\n//     return {type: 'SEND-MESSAGE', id, title}\r\n// }\r\n// export const updateMessageAC = (body:string):updateMessageAT => {\r\n//     return {type: 'NEW-MESSAGE-BODY', body}\r\n// }\r\n\r\nexport default dialogReducer","import React from 'react'\r\nimport {Dispatch} from \"redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    messagesType,\r\n    newMessageBodyAC,\r\n    sendMessageAC,\r\n    userType\r\n} from \"../../redux/dialog-reducer\";\r\n\r\ntype MapStateToPropsType = {\r\n    users: userType[];\r\n    messages: messagesType[];\r\n    newMessageBody: string;\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    updatedMessageBody: (text:string) => void;\r\n    sendMessage: () => void;\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) :MapStateToPropsType => {\r\n    return {\r\n        users:state.dialogPage.users,\r\n        messages:state.dialogPage.messages,\r\n        newMessageBody:state.dialogPage.newMessageBody\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:Dispatch) : MapDispatchToPropsType => {\r\n    return {\r\n        updatedMessageBody: (text:string) => {\r\n            dispatch(newMessageBodyAC(text))\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessageAC())\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer","type ActionsTypesF =\r\n    ReturnType<typeof follow>|\r\n    ReturnType<typeof unfollow>|\r\n    ReturnType<typeof setUser>|\r\n    ReturnType<typeof setCurrentPage>|\r\n    ReturnType<typeof setTotalUsersCount>|\r\n    ReturnType<typeof setToggleFetching>\r\n\r\n\r\nexport type UsersType = {\r\n    id:number;\r\n    photoUrl:string\r\n    name:string;\r\n    status:string\r\n    followed:boolean\r\n    location:{\r\n        city:string,\r\n        country:string\r\n    }\r\n}\r\nexport type InitialStateType = {\r\n    users: UsersType[]\r\n    pageCount:number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\nexport type followAT = {\r\n    type:'FOLLOW'\r\n    userId:number\r\n}\r\nexport type unfollowAT = {\r\n    type:'UNFOLLOW'\r\n    userId:number\r\n}\r\nexport type setUserAT = {\r\n    type:'SET-USERS'\r\n    users:UsersType[]\r\n}\r\nexport type setPageAT = {\r\n    type: 'SET-PAGE'\r\n    pageNumber: number\r\n}\r\nexport type setTotalUsersCountAT = {\r\n    type: 'SET-TOTAL-USERS'\r\n    totalUsersCount:number\r\n}\r\nexport type setToggleFetching = {\r\n    type: 'SET-TOGGLE-FETCHING'\r\n    isFetching: boolean\r\n}\r\nlet initialState : InitialStateType = {\r\n    users: [] as UsersType[],\r\n    pageCount: 8,\r\n    totalUsersCount: 0,\r\n    currentPage: 2,\r\n    isFetching: true\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsTypesF): InitialStateType => {\r\n    switch (action.type){\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(el => el.id === action.userId ? {...el, followed:false}:el)}\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(el => el.id === action.userId ? {...el, followed:true}:el)\r\n            }\r\n        case \"SET-USERS\":\r\n            return {\r\n                ...state, users:action.users\r\n            }\r\n        case 'SET-PAGE':\r\n            return {\r\n                ...state, currentPage:action.pageNumber\r\n            }\r\n        case \"SET-TOTAL-USERS\":\r\n            return {\r\n                ...state, totalUsersCount: action.totalUsersCount\r\n            }\r\n        case \"SET-TOGGLE-FETCHING\":\r\n            return {\r\n                ...state, isFetching:action.isFetching\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const follow = (userId:number):followAT => {\r\n    return {\r\n        type:'FOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport const unfollow = (userId:number):unfollowAT => {\r\n    return {\r\n        type:'UNFOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport const setUser = (users:UsersType[]):setUserAT => {\r\n    return{\r\n        type:'SET-USERS',\r\n        users\r\n    } as const\r\n}\r\nexport const setCurrentPage = (pageNumber:number):setPageAT =>{\r\n    return {\r\n        type:'SET-PAGE',\r\n        pageNumber\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount:number):setTotalUsersCountAT =>{\r\n    return {\r\n        type:'SET-TOTAL-USERS',\r\n        totalUsersCount\r\n    } as const\r\n}\r\nexport const setToggleFetching = (isFetching: boolean):setToggleFetching => {\r\n    return {\r\n        type: \"SET-TOGGLE-FETCHING\",\r\n        isFetching\r\n    }as const\r\n}\r\n\r\nexport default usersReducer","import React from 'react'\r\nimport s from \"./UsersApiComponent.module.css\";\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\n\r\ntype onPageChangedType = {\r\n    onPageChanged:(page:number)=> void\r\n}\r\ntype UsersPresentPropsType = UsersPropsType & onPageChangedType\r\nlet Users = (props:UsersPresentPropsType) =>{\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageCount)\r\n    let pages = []\r\n    for(let i = 1; i <= pagesCount; i++){\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(el=>{\r\n                return  <span className={props.currentPage===el?s.selectedPage:''}\r\n                              onClick={()=>props.onPageChanged(el)}>{el}</span>\r\n            })}\r\n\r\n        </div>\r\n        {\r\n            props.users.map(el => <div key={el.id}>\r\n                    <span>\r\n                        <div>\r\n                            <img className={s.img}\r\n                                 src={el.photoUrl != null ? el.photoUrl : 'https://i.pinimg.com/originals/51/f6/fb/51f6fb256629fc755b8870c801092942.png'}\r\n                                 alt=\"\"/>\r\n                        </div>\r\n                        <div>\r\n                            {el.followed ? <button onClick={() => {\r\n                                    props.follow(el.id)\r\n                                }}>follow</button> :\r\n                                <button onClick={() => {\r\n                                    props.unfollow(el.id)\r\n                                }}>unfollow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                <span>\r\n                            <span>\r\n                                <div>{el.name}</div>\r\n                                <div>{el.status}</div>\r\n\r\n                            </span>\r\n                        <span>\r\n                            <div>{'el.location.country'}</div>\r\n                            <div>{'el.location.city'}</div>\r\n                        </span>\r\n                    </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\nexport default Users","export default __webpack_public_path__ + \"static/media/Iphone-spinner-2.d3fbaf2b.gif\";","import React from \"react\";\r\n\r\nimport preloader from './../../../Pics/Iphone-spinner-2.gif'\r\n\r\n\r\nconst Preloader = () =>{\r\n    return <div>\r\n        <img src={preloader} alt=\"\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","import React from 'react'\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    UsersType,\r\n    follow,\r\n    unfollow,\r\n    setUser,\r\n    setCurrentPage,\r\n    setTotalUsersCount, setToggleFetching\r\n} from \"../../redux/users-reducer\";\r\nimport axios from \"axios\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\ntype GetUsersType = {\r\n    error: string;\r\n    totalCount: number;\r\n    items: UsersType[]\r\n}\r\nexport type MapStateToPropsType = {\r\n    users: UsersType[];\r\n    pageCount: number\r\n    totalUsersCount:number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId:number) => void;\r\n    unfollow: (userId:number) => void;\r\n    setUser:(users:UsersType[]) => void;\r\n    setCurrentPage:(pageNumber:number) => void;\r\n    setTotalUsersCount:(totalCount:number) => void;\r\n    setToggleFetching:(isFetching:boolean) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\nclass UsersAPIComponent extends React.Component<UsersPropsType, any> {\r\n    componentDidMount() {\r\n        this.props.setToggleFetching(true)\r\n        axios.get<GetUsersType>(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageCount}`).then(response => {\r\n            this.props.setToggleFetching(false)\r\n            this.props.setUser(response.data.items)\r\n            this.props.setTotalUsersCount(response.data.totalCount)\r\n        })\r\n    }\r\n    onPageChanged = (pageNumber:number) => {\r\n        this.props.setCurrentPage(pageNumber)\r\n        this.props.setToggleFetching(true)\r\n        axios.get<GetUsersType>(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageCount}`).then(response => {\r\n            this.props.setToggleFetching(false)\r\n            this.props.setUser(response.data.items)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {this.props.isFetching? <Preloader/>:null}\r\n        <Users currentPage={this.props.currentPage}\r\n                      follow={this.props.follow}\r\n                      pageCount={this.props.pageCount}\r\n                      setCurrentPage={this.props.setCurrentPage}\r\n                      setTotalUsersCount={this.props.setTotalUsersCount}\r\n                      setUser={this.props.setUser}\r\n                      totalUsersCount={this.props.totalUsersCount}\r\n                      unfollow={this.props.unfollow}\r\n                      users={this.props.users}\r\n                      onPageChanged={this.onPageChanged}\r\n                      isFetching={this.props.isFetching}\r\n                      setToggleFetching={this.props.setToggleFetching}/>\r\n        </div>\r\n    }\r\n}\r\nlet mapStateToProps = (state:AppStateType) :MapStateToPropsType => {\r\n    return {\r\n        users:state.usersPage.users,\r\n        pageCount:state.usersPage.pageCount,\r\n        totalUsersCount:state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch:Dispatch) : MapDispatchToPropsType => {\r\n//     return {\r\n//         follow: (userId:number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//         unfollow: (userId:number) => {\r\n//             dispatch(unFollowAC(userId))\r\n//         },\r\n//         setUser: (users:UsersType[]) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage:(pageNumber:number) =>{\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalUsersCount:(totalCount:number) =>{\r\n//             dispatch(setTotalUsersCountAC(totalCount))\r\n//         },\r\n//         setToggleFetching:(isFetching:boolean) =>{\r\n//             dispatch(setToggleFetchingAC(isFetching))\r\n//         }\r\n//     }\r\n// }\r\n\r\nconst UsersContainer = connect(mapStateToProps, { follow,unfollow, setUser, setCurrentPage, setTotalUsersCount, setToggleFetching })(UsersAPIComponent);\r\n\r\nexport default UsersContainer","import React from 'react';\nimport Header from './components/Header/Header'\nimport Navbar from './components/Navbar/Navbar'\nimport Profile from './components/Profile/Profile'\nimport './App.css';\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport Friends from \"./components/Friends/Friends\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\n\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className=\"app-wrapper\">\n                <Header/>\n                <Navbar/>\n                <div className={'app-wrapper-content'}>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/profile' render={() => <Profile/>}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                    <Route path='/friends' render={() => <Friends/>}/>\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","type ActionsTypesF = {\r\n\r\n}\r\ntype sidebarType = {\r\n    id: number;\r\n    name: string;\r\n}\r\nexport type InitialStateType = {\r\n    friends: sidebarType[]\r\n}\r\nlet initialState: InitialStateType = {\r\n    friends: [\r\n        {id: 1, name: 'Abay'},\r\n        {id: 2, name: 'Karik'},\r\n        {id: 3, name: 'Samal'}\r\n    ]\r\n}\r\n\r\nexport const friendsReducer = (state:InitialStateType = initialState, action:ActionsTypesF): InitialStateType => {\r\n\r\n    return state\r\n}\r\nexport default friendsReducer","import {combineReducers,createStore} from 'redux';\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialog-reducer\";\r\nimport friendsReducer from \"./friends-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\n\r\ndeclare global {\r\n    interface Window {store: any}\r\n}\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sideBarPage: friendsReducer,\r\n    usersPage: usersReducer\r\n})\r\n\r\nexport type AppStateType =ReturnType<typeof rootReducer>\r\n\r\nlet store:any = createStore(rootReducer);\r\nwindow.store = window.store || {}\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}