{"version":3,"sources":["components/common/FormController/FormControl.module.css","components/common/FormController/FormController.tsx","components/utils/validators/validator.ts","components/Login/LoginForm.tsx"],"names":["module","exports","TextArea","input","meta","props","TextAreaError","touched","error","className","s","formControl","InputArea","requiredField","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captcha","useSelector","state","auth","console","log","action","onSubmit","component","name","type","placeholder","validate","formSummaryError","src","alt","connect","isAuth","data","AuthLogin","AuthLogOut","to","formData","login","password","rememberMe"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,iBAAmB,wC,+LCC1GC,EAAW,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,KAASC,EAAe,iBAC/CC,EAAgBF,EAAKG,SAAWH,EAAKI,MAC3C,OACI,sBAAKC,UAAWC,IAAEC,YAAc,IAAML,EAAeI,IAAEF,MAAM,IAA7D,UACI,8BACI,oDAAcL,GAAUE,MAE3BC,GAAiB,qCAAQF,EAAKI,MAAb,WAIjBI,EAAY,SAAC,GAAiC,IAAhCT,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,KAASC,EAAe,iBAChDC,EAAgBF,EAAKG,SAAWH,EAAKI,MAC3C,OACI,sBAAKC,UAAWC,IAAEC,YAAc,IAAML,EAAeI,IAAEF,MAAM,IAA7D,UACI,iDAAWL,GAAWE,IACrBC,GAAiB,uBAAMG,UAAWC,IAAEF,MAAnB,cAA4BJ,EAAKI,MAAjC,Y,iCCjB9B,oEAAO,IAAMK,EAAgB,SAACC,GAC1B,IAAGA,EACH,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAsB,SAACF,GACnD,GAAGA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCPjC,mJAuBIA,EAAYD,YAAiB,IAmCpBG,EAAiBC,YAAwB,CAACC,KAAM,SAA/BD,EAjC+B,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcb,EAAW,EAAXA,MACrEc,EAAUC,aAAkC,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,WAEpE,OADAI,QAAQC,IAAIL,GAER,uBAAMM,OAAO,GAAGC,SAAUR,EAA1B,UACI,8BACI,cAAC,IAAD,CAAOS,UAAWlB,IAAWmB,KAAM,QAASC,KAAK,OAAOC,YAAa,QAC9DC,SAAU,CAACrB,IAAeG,OAGrC,8BACI,cAAC,IAAD,CAAOc,UAAWlB,IAAWmB,KAAM,WAAYC,KAAK,WAAWC,YAAa,WACrEC,SAAU,CAACrB,IAAeG,OAGrC,8BACI,cAAC,IAAD,CAAOc,UAAW,QAASC,KAAM,aAAcC,KAAK,WAAWC,YAAa,iBAEhF,gCACKzB,EAAQ,qBAAKC,UAAWC,IAAEyB,iBAAlB,SACJ3B,IACI,GACT,gCACKc,GAAW,qBAAKc,IAAKd,EAASe,IAAI,KAClCf,GAAW,cAAC,IAAD,CAAOQ,UAAWlB,IAAWmB,KAAM,UAAWC,KAAK,UAAUC,YAAa,eAE1F,oDA8BDK,uBAtBkB,SAACd,GAC9B,MAAO,CACHe,OAAQf,EAAMC,KAAKe,KAAKD,UAoBmB,CAACE,cAAWC,gBAAhDJ,EAjBD,SAACjC,GAIX,OAAIA,EAAMkC,OACC,cAAC,IAAD,CAAUI,GAAI,YAGrB,gCACI,yCACA,cAACzB,EAAD,CAAgBW,SATP,SAACe,GACdvC,EAAMoC,UAAUG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAWH,EAAStB","file":"static/js/7.ae2d4525.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__3bI51\",\"error\":\"FormControl_error__2p-ba\",\"formSummaryError\":\"FormControl_formSummaryError__2aYFp\"};","import React from 'react'\r\nimport s from './FormControl.module.css'\r\nexport const TextArea = ({input, meta, ...props}:any) => {\r\n    const TextAreaError = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + '' + (TextAreaError? s.error:'')}>\r\n            <div >\r\n                <textarea {...input}{...props} />\r\n            </div>\r\n            {TextAreaError && <span> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}\r\nexport const InputArea = ({input, meta, ...props}:any) => {\r\n    const TextAreaError = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + '' + (TextAreaError? s.error:'')}>\r\n            <input {...input} {...props}/>\r\n            {TextAreaError && <span className={s.error}> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}","\r\nexport const requiredField = (value:any) => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value:any) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n}\r\n","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {InputArea} from \"../common/FormController/FormController\";\r\nimport {maxLengthCreator, requiredField} from \"../utils/validators/validator\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {AuthLogin, AuthLogOut, Captcha} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport s from './../common/FormController/FormControl.module.css'\r\n\r\ntype MapStateToPropsType2 = {\r\n    isAuth: boolean\r\n}\r\nexport type FormDataType = {\r\n    login: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha:string\r\n}\r\ntype LoginType = {\r\n    AuthLogin: (email: string, password: string, rememberMe: boolean,captcha:string) => void;\r\n    isAuth: boolean\r\n}\r\nlet maxLength = maxLengthCreator(30)\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    let captcha = useSelector<AppStateType, string>(state => state.auth.captcha)\r\n    console.log(captcha)\r\n    return (\r\n        <form action=\"\" onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={InputArea} name={'login'} type=\"text\" placeholder={'login'}\r\n                       validate={[requiredField, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={InputArea} name={'password'} type=\"password\" placeholder={'password'}\r\n                       validate={[requiredField, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={'input'} name={'rememberMe'} type=\"checkbox\" placeholder={'rememberMe'}/>\r\n            </div>\r\n            <div>\r\n                {error ? <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div> : ''}\r\n                <div>\r\n                    {captcha && <img src={captcha} alt=\"\"/>}\r\n                    {captcha && <Field component={InputArea} name={'captcha'} type='captcha' placeholder={'captcha'}/>}\r\n                </div>\r\n                <button>\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsType2 => {\r\n    return {\r\n        isAuth: state.auth.data.isAuth\r\n    }\r\n}\r\nconst Login = (props: LoginType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.AuthLogin(formData.login, formData.password, formData.rememberMe,formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1> Login </h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default connect(mapStateToPropsForRedirect, {AuthLogin, AuthLogOut})(Login)"],"sourceRoot":""}