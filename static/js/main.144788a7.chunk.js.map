{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Friends/Friends.tsx","redux/app-reducer.ts","components/Header/Header.tsx","App.tsx","redux/friends-reducer.ts","redux/redux-store.ts","index.tsx","redux/auth-reducer.ts","components/Header/Header.module.css","redux/profile-reducer.ts","Pics/Iphone-spinner-2.gif","components/common/Preloader/Preloader.tsx","api/api.ts","redux/dialog-reducer.ts","components/utils/helper.ts","redux/users-reducer.ts"],"names":["module","exports","Navbar","React","memo","className","s","nav","item","to","activeClassName","activeLink","itemFriends","News","props","Music","Settings","Friends","initialState","isInitialized","appReducer","state","action","type","appActions","Header","dispatch","useDispatch","useSelector","auth","data","isAuth","login","useEffect","AuthMe","header","src","alt","loginBlock","onClick","AuthLogOut","Dialogs","lazy","UsersContainer","ProfileContainer","LoginForm","App","console","log","appPage","a","exact","path","render","Suspense","fallback","Preloader","title","component","style","position","top","textAlign","width","CircularProgress","friends","id","name","friendsReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogPage","dialogReducer","sideBarPage","usersPage","usersReducer","authReducer","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById","email","isFetching","resultCode","messages","captcha","authActions","url","authAPI","getAuthMe","response","ResultCodesEnum","Success","AuthLogin","password","rememberMe","getLogin","InvalidSymbols","Captcha","message","length","stopSubmit","_error","getLogOut","getCaptcha","status","likeCount","profile","aboutMe","userId","lookingForAJob","lookingForAJobDescription","fullName","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","photos","large","small","isOwner","error","setToggle","profileActions","addPost","posts","setProfile","setStatus","deletePost","setToggleFetching","value","successSavePhoto","setError","GetProfile","profileAPI","getProfile","getProfileStatus","getStatus","updateProfileStatus","updateStatus","saveUserProfile","getState","saveProfile","Promise","reject","saveUserPhoto","img","savePhoto","newPost","filter","el","preloader","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageCount","term","friend","get","then","warn","FollowFriends","post","UnFollowFriends","delete","put","formData","FormData","append","users","dialogActions","sendMessage","dialog","objectHelper","items","itemId","newObjProp","map","totalUsersCount","isFollowing","searchingName","isFriend","usersActions","pageNumber","payload","getUser","totalCount","followUnfollow","apiMethod","actionCreator","FollowFriend","bind","UnFollowFriend","followed"],"mappings":"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","file":"static/js/main.144788a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2LvmE\",\"item\":\"Navbar_item__3Z4YA\",\"activeLink\":\"Navbar_activeLink__E3EjW\",\"itemFriends\":\"Navbar_itemFriends__ukrFy\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Navbar.module.css';\n\nconst Navbar = React.memo(() => {\n    return (\n        <nav className={s.nav}>\n            <div className={`${s.item}`}>\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\n            </div>\n            <div className={s.itemFriends}>\n                <NavLink to='/friends' activeClassName={s.activeLink}>Friends</NavLink>\n            </div>\n            <span className={s.itemFriends}>\n                <NavLink to='/Abay' activeClassName={s.activeLink}> Aboy </NavLink>\n            </span>\n\n        </nav>\n    );\n})\n\nexport default Navbar;\n","import React from 'react'\r\nimport s from './News.module.css'\r\nfunction News(props:any){\r\n\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\nexport default News","import React from 'react'\r\nfunction Music(props:any){\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music","import React from 'react'\r\nimport s from './Settings.module.css'\r\nfunction Settings(props:any){\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings","import React from 'react'\r\nconst Friends = React.memo(() =>{\r\n    return (\r\n        <div>\r\n            Friends\r\n        </div>\r\n    )\r\n})\r\nexport default Friends","import {AuthMe} from \"./auth-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {InferActionsType} from \"./redux-store\";\r\n\r\nexport type appInitialStateType = {\r\n    isInitialized: boolean\r\n}\r\nconst initialState: appInitialStateType = {\r\n    isInitialized: false\r\n}\r\nexport const appReducer = (state: appInitialStateType = initialState, action:ActionsType): appInitialStateType => {\r\n    switch (action.type) {\r\n        case'IS-INITIALIZED': {\r\n            return {...state, isInitialized: true}\r\n        }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionsType<typeof appActions>\r\n\r\nexport const appActions = {\r\n    isInitializedAc: () => ({type: 'IS-INITIALIZED'} as const),\r\n}\r\nexport const initializeAppTC = () => async (dispatch: ThunkDispatch<any, any, any>) => {\r\n    try {\r\n        await dispatch(AuthMe())\r\n        dispatch(appActions.isInitializedAc())\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n\r\n}\r\nexport default appReducer;","import React, {useEffect} from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Header.module.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {AuthLogOut, AuthMe, setUserDataType} from \"../../redux/auth-reducer\";\n\nconst Header = React.memo(() => {\n  const dispatch = useDispatch()\n  const {isAuth,login} = useSelector<AppStateType, setUserDataType>(state => state.auth.data)\n\n  useEffect(()=>{\n    dispatch(AuthMe())\n  },[])\n\n  const logout = () => {\n    dispatch(AuthLogOut())\n  }\n\n  return (\n    <header className={s.header}>\n      <img src=\"https://www.freelogodesign.org/Content/img/logo-ex-7.png\" alt=\"\"/>\n        <div className={s.loginBlock}>\n            {isAuth ?\n                <div>{login} - <button onClick={logout}> Log out</button></div>\n          : <NavLink to={'/login'}>Login</NavLink>}\n        </div>\n    </header>\n  );\n})\nexport default Header;\n","import React, {useEffect} from 'react';\r\nimport Navbar from './components/Navbar/Navbar'\r\nimport './App.css';\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport Friends from \"./components/Friends/Friends\";\r\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\n// import UsersContainer from \"./components/Users/UsersContainer\";\r\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\r\n// import LoginForm from \"./components/Login/LoginForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport {initializeAppTC} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport Header from \"./components/Header/Header\";\r\n\r\nconst Dialogs = React.lazy(() => import(\"./components/Dialogs/Dialogs\"))\r\nconst UsersContainer = React.lazy(() => import(\"./components/Users/UsersContainer\"))\r\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"))\r\nconst LoginForm = React.lazy(() => import(\"./components/Login/LoginForm\"))\r\n\r\nfunction App() {\r\n    console.log('Dialogs')\r\n    const dispatch = useDispatch()\r\n    const isInitialized = useSelector<AppStateType, boolean>(state => state.appPage.isInitialized)\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <Header/>\r\n            <Navbar/>\r\n            <div className={'app-wrapper-content'}>\r\n                <Switch>\r\n                    <Route exact path='/' render={() => {\r\n                        return <Redirect to={'/profile'}/>\r\n                    }}/>\r\n                    <React.Suspense fallback={<Preloader/>}>\r\n                        <Route path='/dialogs' render={() => {\r\n                            return <Dialogs/>\r\n                        }}/>\r\n                        <Route path='/profile/:userId?' render={() => {\r\n                            return <ProfileContainer/>\r\n                        }}/>\r\n                        <Route path='/users' render={() => {\r\n                            return <UsersContainer title={'Samurais'}/>\r\n                        }}/>\r\n                        <Route path='/login' render={() => {\r\n                            return <LoginForm/>\r\n                        }}/>\r\n                        {/*<Route path='*' render={() => {*/}\r\n                        {/*    return <div>404 NOT FOUND</div>*/}\r\n                        {/*}}/>*/}\r\n                    </React.Suspense>\r\n                    <Route path='/news' component={News}/>\r\n                    <Route path='/music' component={Music}/>\r\n                    <Route path='/settings' component={Settings}/>\r\n                    <Route path='/friends' render={() => <Friends/>}/>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","type ActionsTypesF = {\r\n\r\n}\r\ntype sidebarType = {\r\n    id: number;\r\n    name: string;\r\n}\r\nexport type InitialStateType = {\r\n    friends: sidebarType[]\r\n}\r\nlet initialState: InitialStateType = {\r\n    friends: [\r\n        {id: 1, name: 'Abay'},\r\n        {id: 2, name: 'Karik'}\r\n    ]\r\n}\r\n\r\nexport const friendsReducer = (state:InitialStateType = initialState, action:ActionsTypesF): InitialStateType => {\r\n\r\n    return state\r\n}\r\nexport default friendsReducer","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialog-reducer\";\r\nimport friendsReducer from \"./friends-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\ndeclare global {\r\n    interface Window {store: any}\r\n}\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sideBarPage: friendsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    appPage:appReducer,\r\n})\r\n\r\nexport type AppStateType =ReturnType<typeof rootReducer>\r\ntype PropertiesTypes<T> = T extends {[key:string]: infer U} ? U : never\r\nexport type InferActionsType<T extends {[key:string]: (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)))\r\nwindow.store = window.store || {}\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport store from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, ResultCodesEnum, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {InferActionsType} from \"./redux-store\";\r\n\r\n\r\nexport type setUserDataType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean;\r\n}\r\n\r\nexport type AuthInitialStateType = {\r\n    data: setUserDataType\r\n    isFetching: boolean;\r\n    resultCode: number;\r\n    messages: string[];\r\n    captcha: string;\r\n}\r\nlet initialState: AuthInitialStateType = {\r\n    data: {\r\n        id: null,\r\n        email: null,\r\n        login: null,\r\n        isAuth: false\r\n    },\r\n    isFetching: false,\r\n    resultCode: 0,\r\n    messages: [''],\r\n    captcha: ''\r\n}\r\n\r\nexport const authReducer = (state: AuthInitialStateType = initialState, action: ActionsType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            }\r\n        case \"SET-TOGGLE-FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"GET-CAPTCHA\":\r\n            return {\r\n                ...state, captcha: action.url\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = InferActionsType<typeof authActions>\r\n\r\nexport const authActions = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n        return {\r\n            type: 'SET-USER-DATA',\r\n            data: {id, email, login, isAuth}\r\n        } as const\r\n    },\r\n    setToggleFetching: (isFetching: boolean) => {\r\n        return {\r\n            type: \"SET-TOGGLE-FETCHING\",\r\n            isFetching\r\n        } as const\r\n    },\r\n    getCaptcha: (url: string) => {\r\n        return {\r\n            type: \"GET-CAPTCHA\",\r\n            url\r\n        } as const\r\n    },\r\n}\r\n\r\n\r\nexport const AuthMe = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        const response = await authAPI.getAuthMe()\r\n        dispatch(authActions.setToggleFetching(false))\r\n        if (response.resultCode === ResultCodesEnum.Success) {\r\n            let {id, login, email} = response.data\r\n            dispatch(authActions.setAuthUserData(id, login, email, true))\r\n            dispatch(authActions.setToggleFetching(true))\r\n        }\r\n    }\r\n}\r\nexport const AuthLogin = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: ThunkDispatch<any, any, any>) => {\r\n    const response = await authAPI.getLogin(email, password, rememberMe, captcha)\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        await dispatch(AuthMe())\r\n    } else {\r\n        if (response.data.resultCode === ResultCodesEnum.InvalidSymbols) {\r\n            await dispatch(Captcha())\r\n        } else {\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n            dispatch(stopSubmit('login',\r\n                {_error: message}))\r\n        }\r\n\r\n    }\r\n}\r\nexport const AuthLogOut = () => async (dispatch: Dispatch) => {\r\n    const response = await authAPI.getLogOut()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(authActions.setAuthUserData(null, null, null, false))\r\n        dispatch(authActions.setToggleFetching(true))\r\n    }\r\n}\r\nexport const Captcha = () => async (dispatch: Dispatch) => {\r\n    const response = await authAPI.getCaptcha()\r\n    if (response.status === 200) {\r\n        dispatch(authActions.getCaptcha(response.data.url))\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3kPns\",\"loginBlock\":\"Header_loginBlock__2AcFW\"};","import {Dispatch} from \"redux\";\r\nimport {profileAPI, ResultCodesEnum} from \"../api/api\";\r\nimport {AppStateType, InferActionsType} from \"./redux-store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\n\r\n\r\nexport type messageType = {\r\n    message: string;\r\n    likeCount: number;\r\n    id: number;\r\n}\r\n\r\nexport type ProfilePhotoType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    userId: number;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string;\r\n    fullName: string;\r\n    contacts: {\r\n        github: string;\r\n        vk: string;\r\n        facebook: string;\r\n        instagram: string;\r\n        twitter: string;\r\n        website: string;\r\n        youtube: string;\r\n        mainLink: string;\r\n    }\r\n    photos: ProfilePhotoType;\r\n}\r\n\r\nexport type profileInitialStateType = {\r\n    message: messageType[];\r\n    profile: ProfileType;\r\n    status: string;\r\n    isOwner: boolean;\r\n    error: string;\r\n    setToggle:boolean;\r\n}\r\n\r\nlet initialState: profileInitialStateType = {\r\n    message: [\r\n        {id: 1, message: 'Hi, how are you?', likeCount: 22},\r\n        {id: 2, message: 'It is my first post', likeCount: 11},\r\n\r\n    ] as messageType[],\r\n    profile: {\r\n        aboutMe: '',\r\n        userId: 16786,\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: '',\r\n        fullName: 'Uakhit Damir',\r\n        contacts: {\r\n            github: '',\r\n            vk: '',\r\n            facebook: '',\r\n            instagram: 'damir.gst',\r\n            twitter: '',\r\n            website: '',\r\n            youtube: '',\r\n            mainLink: '',\r\n        },\r\n        photos: {\r\n            large: '',\r\n            small: ''\r\n        }\r\n    },\r\n    isOwner: false,\r\n    status: '',\r\n    error: '',\r\n    setToggle:false\r\n}\r\n\r\nexport const profileReducer = (state: profileInitialStateType = initialState, action: ActionType): profileInitialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-POST': {\r\n            const newPost: messageType = {\r\n                id: 3,\r\n                message: action.posts,\r\n                likeCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                message: [...state.message, newPost],\r\n            };\r\n        }\r\n        case \"SET-PROFILE\":\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case \"SET-STATUS\":\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        case \"DEL-POST\":\r\n            return {\r\n                ...state, message: state.message.filter(el => el.id !== action.id)\r\n            }\r\n        case \"IS-OWNER\":\r\n            return {\r\n                ...state, isOwner: action.value\r\n            }\r\n        case \"SAVE-PHOTO\":\r\n            debugger\r\n            return {\r\n                ...state, profile: {...state.profile, photos: action.photos}\r\n            }\r\n        case \"SET-ERROR\":\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        case \"IS-FETCHING\":\r\n            return {\r\n                ...state, setToggle:action.value\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType = InferActionsType<typeof profileActions>\r\n\r\nexport const profileActions = {\r\n    addPost:(posts: string) => {\r\n        return {\r\n            type: 'ADD-POST',\r\n            posts\r\n        } as const\r\n    },\r\n    setProfile:(profile: ProfileType) => {\r\n        return {\r\n            type: 'SET-PROFILE',\r\n            profile\r\n        } as const\r\n    },\r\n    setStatus: (status: string) => {\r\n        return {\r\n            type: 'SET-STATUS',\r\n            status\r\n        } as const\r\n    },\r\n    deletePost:(id: number) => {\r\n        return {\r\n            type: 'DEL-POST',\r\n            id\r\n        } as const\r\n    },\r\n    setToggleFetching: (value: boolean) => {\r\n        return {\r\n            type: 'IS-FETCHING',\r\n            value\r\n        } as const\r\n    },\r\n    isOwner: (value: boolean) => {\r\n        return {\r\n            type: 'IS-OWNER',\r\n            value\r\n        } as const\r\n    },\r\n    successSavePhoto: (photos: ProfilePhotoType) => {\r\n        return {\r\n            type: 'SAVE-PHOTO',\r\n            photos\r\n        } as const\r\n    },\r\n    setError: (error: string) => {\r\n        return {\r\n            type: 'SET-ERROR',\r\n            error\r\n        } as const\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const GetProfile = (userId: number) => {\r\n    return async (dispatch: ThunkDispatch<any, any, any>) => {\r\n        dispatch(profileActions.setToggleFetching(false))\r\n        try {\r\n            const response = await profileAPI.getProfile(userId)\r\n            dispatch(profileActions.setProfile(response.data))\r\n            dispatch(profileActions.setToggleFetching(true))\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n}\r\nexport const getProfileStatus = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        const response = await profileAPI.getStatus(userId)\r\n        dispatch(profileActions.setStatus(response.data))\r\n    }\r\n}\r\nexport const updateProfileStatus = (status: string) => async (dispatch: Dispatch) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(profileActions.setStatus(status))\r\n    } else {\r\n        console.log(response.data.messages[0])\r\n    }\r\n}\r\nexport const saveUserProfile = (profile: ProfileType) => async (dispatch: ThunkDispatch<any, any, any>, getState: () => AppStateType) => {\r\n\r\n    let userId = getState().auth.data.id\r\n    let response = await profileAPI.saveProfile(profile)\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        if (userId != null) {\r\n            await dispatch(GetProfile(userId))\r\n        }\r\n    } else {\r\n        dispatch(profileActions.setError(response.data.messages[0]))\r\n        return Promise.reject(response.data.messages[0])\r\n    }\r\n}\r\n\r\nexport const saveUserPhoto = (img: File) => async (dispatch: Dispatch) => {\r\n\r\n    const response = await profileAPI.savePhoto(img)\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(profileActions.successSavePhoto(response.data.data.photos))\r\n    }\r\n}\r\nexport default profileReducer","export default __webpack_public_path__ + \"static/media/Iphone-spinner-2.d3fbaf2b.gif\";","import React from \"react\";\r\n\r\nimport preloader from './../../../Pics/Iphone-spinner-2.gif'\r\n\r\n\r\nconst Preloader = () =>{\r\n    return <div>\r\n        <img src={preloader} alt=\"\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","import axios from \"axios\";\r\nimport {ProfilePhotoType, ProfileType} from \"../redux/profile-reducer\";\r\nimport {UsersType} from \"../redux/users-reducer\";\r\nimport {setUserDataType} from \"../redux/auth-reducer\";\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials:true,\r\n    headers:{\r\n        'API-KEY': '1eaa5d66-d310-487c-a1d0-2fd59af6c2de'\r\n    }\r\n})\r\nexport const usersAPI = {\r\n    getUsers (currentPage:number,pageCount:number,term:string, friend:boolean| null) {\r\n        return  instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageCount}&term=${term}` + (friend===null? '':`&friend=${friend}`)).then(response=> {\r\n            return response.data\r\n        })\r\n    },\r\n    getProfile (userId:number)  {\r\n        console.warn('Obsolete method. Please use profileApi object.')\r\n        return profileAPI.getProfile(userId)\r\n   },\r\n\r\n    FollowFriends(id:number){\r\n        return instance.post<CommonResponseType>(`follow/${id}`).then(response=>response.data)\r\n    },\r\n    UnFollowFriends(id:number){\r\n        return instance.delete<CommonResponseType>(`follow/${id}`).then(response=>response.data)\r\n    }\r\n}\r\nexport const authAPI = {\r\n\r\n    getAuthMe (){\r\n        return instance.get<GetAuthType>(`auth/me`).then(response=>response.data)\r\n    },\r\n    getLogin(email:string, password:string,rememberMe:boolean, captcha:string){\r\n        return instance.post<CommonResponseType<{ data: PostAuthLoginType }>>('auth/login', {email, password, rememberMe,captcha});\r\n    },\r\n    getLogOut(){\r\n        return instance.delete<CommonResponseType>('auth/login')\r\n    },\r\n    getCaptcha(){\r\n        return instance.get('security/get-captcha-url')\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile (userId:number)  {\r\n        return  instance.get<ProfileType>(`profile/`+ userId)\r\n    },\r\n    getStatus (userId:number) {\r\n        return instance.get<any>(`profile/status/${userId}`)\r\n    },\r\n    updateStatus (status:string) {\r\n        return instance.put<CommonResponseType<{data:string}>>('profile/status',{status})\r\n    },\r\n    saveProfile(profile:ProfileType | null){\r\n        return instance.put<CommonResponseType<{ data:ProfilesType }>>(`profile`,profile)\r\n    },\r\n    savePhoto(img: File){\r\n        const formData = new FormData()\r\n        formData.append('image',img)\r\n        return instance.put<CommonResponseType<{photos: ProfilePhotoType }>>(`profile/photo`,formData, {\r\n            headers:{\r\n                'Content-type':'mulitpart/form-data'\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Fail = 1,\r\n    InvalidSymbols = 10\r\n}\r\n\r\nexport type CommonResponseType<T = {}> = {\r\n    data:T;\r\n    resultCode:number;\r\n    messages:string[];\r\n    fieldsErrors:string[];\r\n\r\n}\r\n\r\ntype ContactsType = {\r\n    github: string;\r\n    vk: string;\r\n    facebook: string;\r\n    instagram: string;\r\n    twitter?: string;\r\n    website?: string;\r\n    youtube?: string;\r\n    mainLink?: string;\r\n}\r\n\r\nexport type ProfilesType = {\r\n    aboutMe:string;\r\n    userId: number;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string;\r\n    fullName: string;\r\n    contacts?: ContactsType\r\n\r\n}\r\n\r\nexport type GetUsersType = {\r\n    error: string;\r\n    totalCount: number;\r\n    items: UsersType[]\r\n}\r\n\r\nexport type GetAuthType = {\r\n    data:setUserDataType\r\n    resultCode: number;\r\n    messages: string[];\r\n    fieldsErrors: string[];\r\n}\r\ntype PostAuthType = {\r\n    email: string;\r\n    password:string;\r\n    rememberMe: boolean;\r\n    captcha:string;\r\n}\r\nexport type PostAuthLoginType = {\r\n    resultCode: number;\r\n    messages: string[];\r\n    fieldsError: string[];\r\n    data: PostAuthType\r\n}","import {InferActionsType} from \"./redux-store\";\r\n\r\n\r\n\r\nexport type messagesType = {\r\n    id: number;\r\n    messages: string;\r\n}\r\nexport type userType = {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\n\r\nexport type InitialDialogStateType = {\r\n    users: userType[]\r\n    messages: messagesType[]\r\n}\r\nlet initialState: InitialDialogStateType = {\r\n    users: [\r\n        {id: '1', name: 'Damir'},\r\n        {id: '2', name: 'Abay'},\r\n        {id: '3', name: 'Kyama'},\r\n        {id: '4', name: 'Kaidar'},\r\n        {id: '5', name: 'Aday'},\r\n\r\n    ] as userType[],\r\n    messages: [\r\n        {id: 1, messages: 'Hi'},\r\n        {id: 2, messages: 'What\\'s up?'},\r\n        {id: 3, messages: 'How\\'s it going?'},\r\n\r\n    ] as messagesType[]\r\n}\r\n\r\nexport const dialogReducer = (state: InitialDialogStateType = initialState, action: ActionType):InitialDialogStateType => {\r\n    switch (action.type){\r\n        case 'SEND-MESSAGE':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id:6, messages: action.dialog} ]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionType = InferActionsType<typeof dialogActions>\r\n\r\nexport const dialogActions = {\r\n    sendMessage:(dialog:string) => {\r\n        return {\r\n            type: 'SEND-MESSAGE',\r\n            dialog\r\n        } as const\r\n    }\r\n}\r\n\r\n\r\nexport default dialogReducer","import {UsersType} from \"../../redux/users-reducer\";\r\n\r\nexport const objectHelper = (items: UsersType[],itemId:number, newObjProp: { followed: boolean }) => {\r\n    return  items.map(el => el.id === itemId ? {...el, ...newObjProp} : el)\r\n}","import {CommonResponseType, ResultCodesEnum, usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {objectHelper} from \"../components/utils/helper\";\r\nimport {AppStateType, InferActionsType} from \"./redux-store\";\r\nimport {userType} from \"./dialog-reducer\";\r\n\r\nexport type UsersPhotoType = {\r\n    small: string;\r\n    large: string;\r\n}\r\nexport type filterType = {\r\n    searchingName:string;\r\n    isFriend:null|boolean;\r\n}\r\n\r\nexport type UsersType = {\r\n    id: number;\r\n    photoUrl: string\r\n    name: string;\r\n    status: string\r\n    followed: boolean\r\n    photos: UsersPhotoType;\r\n}\r\nexport type userInitialStateType = {\r\n    users: UsersType[];\r\n    pageCount: number;\r\n    totalUsersCount: number;\r\n    currentPage: number;\r\n    isFetching: boolean;\r\n    isFollowing: number[];\r\n    filter:filterType\r\n}\r\n\r\nlet initialState: userInitialStateType = {\r\n    users: [] as UsersType[],\r\n    pageCount: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowing: [],\r\n    filter:{\r\n        searchingName: '',\r\n        isFriend:null as null|boolean,\r\n    }\r\n}\r\n\r\nconst usersReducer = (state: userInitialStateType = initialState, action: ActionType): userInitialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: objectHelper(state.users, action.userId,{followed:true})\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: objectHelper(state.users, action.userId,{followed:false})\r\n            }\r\n        case \"SET-USERS\":\r\n            return {\r\n                ...state, users: action.users\r\n            }\r\n        case 'SET-PAGE':\r\n            return {\r\n                ...state, currentPage: action.pageNumber\r\n            }\r\n        case \"SET-TOTAL-USERS\":\r\n            return {\r\n                ...state, totalUsersCount: action.totalUsersCount\r\n            }\r\n        case \"SET-TOGGLE-FETCHING\":\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        case \"SET-TOGGLE-FOLLOWING\":\r\n            return {\r\n                ...state,\r\n                isFollowing: action.isFetching ? [...state.isFollowing, action.id] :\r\n                    state.isFollowing.filter(el => el != action.id)\r\n            }\r\n        case 'SEARCH-USER':\r\n            return {\r\n                ...state, filter: action.payload\r\n            }\r\n        // case \"IS-FRIEND\":\r\n        //     return {\r\n        //         ...state, isFriend: action.friend\r\n        //     }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType = InferActionsType<typeof usersActions>\r\n\r\nexport const usersActions = {\r\n    follow: (userId: number) => {\r\n        return {\r\n            type: 'FOLLOW',\r\n            userId\r\n        } as const\r\n    },\r\n    unfollow: (userId: number) => {\r\n        return {\r\n            type: 'UNFOLLOW',\r\n            userId\r\n        } as const\r\n    },\r\n    setUser: (users: UsersType[]) => {\r\n        return {\r\n            type: 'SET-USERS',\r\n            users\r\n        } as const\r\n    },\r\n    setCurrentPage: (pageNumber: number) => {\r\n        return {\r\n            type: 'SET-PAGE',\r\n            pageNumber\r\n        } as const\r\n    },\r\n    setTotalUsersCount: (totalUsersCount: number) => {\r\n        return {\r\n            type: 'SET-TOTAL-USERS',\r\n            totalUsersCount\r\n        } as const\r\n    },\r\n    setToggleFetching: (isFetching: boolean) => {\r\n        return {\r\n            type: \"SET-TOGGLE-FETCHING\",\r\n            isFetching\r\n        } as const\r\n    },\r\n    setToggleFollowing: (isFetching: boolean, id: number) => {\r\n        return {\r\n            type: 'SET-TOGGLE-FOLLOWING',\r\n            id,\r\n            isFetching\r\n        } as const\r\n    },\r\n    setSearchingUser: (filter:filterType) =>{\r\n        return{\r\n            type:'SEARCH-USER',\r\n            payload:filter\r\n        }as const\r\n    },\r\n    // isUserMyFriend: (friend: boolean | null) =>{\r\n    //     return{\r\n    //         type:'IS-FRIEND',\r\n    //         friend\r\n    //     }as const\r\n    // },\r\n}\r\n\r\n\r\n\r\nexport const getUser = (currentPage: number, pageCount: number, filter:filterType) => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            dispatch(usersActions.setToggleFetching(true));\r\n            dispatch(usersActions.setCurrentPage(currentPage))\r\n            dispatch(usersActions.setSearchingUser(filter))\r\n            const response = await usersAPI.getUsers(currentPage, pageCount,filter.searchingName, filter.isFriend)\r\n            dispatch(usersActions.setToggleFetching(false))\r\n            dispatch(usersActions.setUser(response.items))\r\n            dispatch(usersActions.setTotalUsersCount(response.totalCount))\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n}\r\nexport const followUnfollow = async (dispatch: Dispatch, userId: number, apiMethod: (userId:number)=> Promise<CommonResponseType>, actionCreator: (userId: number) => ActionType) => {\r\n    dispatch(usersActions.setToggleFollowing(true, userId))\r\n    const response = await apiMethod(userId)\r\n    if (response.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(usersActions.setToggleFollowing(false, userId))\r\n}\r\n\r\nexport const FollowFriend = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            await followUnfollow(dispatch, userId, usersAPI.FollowFriends.bind(usersAPI), usersActions.follow)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n}\r\nexport const UnFollowFriend = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        try {\r\n            await followUnfollow(dispatch, userId, usersAPI.UnFollowFriends.bind(usersAPI), usersActions.unfollow)\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n}\r\nexport default usersReducer"],"sourceRoot":""}