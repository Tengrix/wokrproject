{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItems/DialogItems.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.tsx","redux/dialog-reducer.tsx","redux/friends-reducer.tsx","redux/store.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Friends/Friends.tsx","components/Dialogs/DialogItems/DialogItems.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","redux/redux-store.ts","index.tsx"],"names":["module","exports","Header","className","s","header","src","alt","Navbar","nav","item","active","to","activeClassName","activeLink","itemFriends","ProfileInfo","props","pic","descriptionBlock","initialState","message","id","likeCount","newPostText","profileReducer","state","action","type","ADD_POST","newPost","stateCopy","push","CHANGE_NEW_POST_TEXT","users","name","messages","newMessageBody","dialogReducer","UPDATE_NEW_MESSAGE_BODY","body","SEND_MESSAGE","friends","friendsReducer","Post","like","MyPosts","messageData","map","el","postsBLock","value","onChange","e","changeNewText","currentTarget","onClick","addPost","posts","MyPostsContainer","connect","profilePage","dispatch","text","Profile","News","Music","Settings","Friends","DialogItems","dialog","img","Message","chat","Dialogs","usersData","messagesData","createMessageBody","dialogs","dialogsItems","placeholder","updatedMessageBody","sendMessage","DialogsContainer","dialogPage","App","path","render","component","rootReducer","combineReducers","sideBarPage","store","createStore","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6b3b4787.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3dKQv\",\"item\":\"Navbar_item__2oB40\",\"activeLink\":\"Navbar_activeLink__2zl4L\",\"itemFriends\":\"Navbar_itemFriends__XZia7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2-Sg2\",\"messages\":\"Dialogs_messages__bRGYr\",\"message\":\"Dialogs_message__3VBPp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogItems_dialogsItems__1-icN\",\"active\":\"DialogItems_active__1YM7J\",\"img\":\"DialogItems_img__3mM_w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBLock\":\"MyPosts_postsBLock__21aF9\",\"posts\":\"MyPosts_posts__1Xedv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1Al15\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2y6KL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2Cx6j\"};","import React from 'react';\n\nimport s from './Header.module.css';\n\nfunction Header() {\n  return (\n    <header className={s.header}>\n      <img src=\"https://www.freelogodesign.org/Content/img/logo-ex-7.png\" alt=\"\"/>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Navbar.module.css';\n\ntype NavbarType = {\n\n}\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={`${s.item} ${s.active}`}>\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\n            </div>\n            <div className={s.itemFriends}>\n                <NavLink to='/friends' activeClassName={s.activeLink}>Friends</NavLink>\n            </div>\n            <span className={s.itemFriends}>\n                <NavLink to='/Abay' activeClassName={s.activeLink}> Abay </NavLink>\n            </span>\n            <span className={s.itemFriends}>\n                <NavLink to='/Salta' activeClassName={s.activeLink}> Salta </NavLink>\n            </span>\n            <span className={s.itemFriends}>\n                <NavLink to='/Samal' activeClassName={s.activeLink}> Samal </NavLink>\n            </span>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react'\r\nimport s from './ProfileInfo.module.css'\r\ntype ProfileInfoType = {\r\n    pic:string;\r\n}\r\n\r\nfunction ProfileInfo(props:ProfileInfoType){\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    src={props.pic}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo","\r\nimport {ActionsTypesF, ADD_POST, CHANGE_NEW_POST_TEXT} from \"./store\";\r\n\r\nexport type messageType = {\r\n    message: string;\r\n    likeCount: number;\r\n    id: number\r\n}\r\n\r\nexport type InitialStateType = {\r\n    message: messageType[];\r\n    newPostText: string;\r\n}\r\n\r\nlet initialState : InitialStateType = {\r\n    message: [\r\n        {id: 1, message: 'Hi, how are you?', likeCount: 22},\r\n        {id: 2, message: 'It is my first post', likeCount: 11},\r\n\r\n    ]as messageType[] ,\r\n    newPostText: ''\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsTypesF): InitialStateType => {\r\n    switch (action.type){\r\n        case ADD_POST:{\r\n            const newPost: messageType = {\r\n                id: 3,\r\n                message: state.newPostText,\r\n                likeCount: 0\r\n            };\r\n            let stateCopy = {...state};\r\n            stateCopy.message = [...state.message];\r\n            stateCopy.message.push(newPost);\r\n            stateCopy.newPostText = ''\r\n            return stateCopy;\r\n        }\r\n        case CHANGE_NEW_POST_TEXT:{\r\n            let stateCopy = {...state}\r\n            stateCopy.newPostText = action.newPost\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default profileReducer","import {ActionsTypesF, SEND_MESSAGE, UPDATE_NEW_MESSAGE_BODY} from \"./store\";\r\n\r\nexport type messagesType = {\r\n    id: number;\r\n    messages: string;\r\n}\r\nexport type userType = {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: userType[]\r\n    messages: messagesType[]\r\n    newMessageBody: string\r\n}\r\nlet initialState: InitialStateType = {\r\n    users: [\r\n        {id: '1', name: 'Damir'},\r\n        {id: '2', name: 'Abay'},\r\n        {id: '3', name: 'Kyama'},\r\n        {id: '4', name: 'Kaidar'},\r\n        {id: '5', name: 'Aday'},\r\n\r\n    ] as userType[],\r\n    messages: [\r\n        {id: 1, messages: 'Hi'},\r\n        {id: 2, messages: 'What\\'s up?'},\r\n        {id: 3, messages: 'How\\'s it going?'},\r\n\r\n    ] as messagesType[],\r\n    newMessageBody: ''\r\n}\r\n\r\nexport const dialogReducer = (state: InitialStateType = initialState, action: ActionsTypesF):InitialStateType => {\r\n    switch (action.type){\r\n        case UPDATE_NEW_MESSAGE_BODY:{\r\n            let stateCopy = {...state}\r\n            stateCopy.newMessageBody = action.body\r\n            return stateCopy\r\n        }\r\n        case SEND_MESSAGE:{\r\n            let stateCopy = {...state}\r\n            let body = stateCopy.newMessageBody\r\n            stateCopy.messages = [...state.messages]\r\n            stateCopy.messages.push({id: 6, messages: body})\r\n            stateCopy.newMessageBody = ''\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default dialogReducer","import {ActionsTypesF} from \"./store\";\r\n\r\ntype sidebarType = {\r\n    id: number;\r\n    name: string;\r\n}\r\nexport type InitialStateType = {\r\n    friends: sidebarType[]\r\n}\r\nlet initialState: InitialStateType = {\r\n    friends: [\r\n        {id: 1, name: 'Abay'},\r\n        {id: 2, name: 'Karik'},\r\n        {id: 3, name: 'Samal'}\r\n    ]\r\n}\r\n\r\nexport const friendsReducer = (state:InitialStateType = initialState, action:ActionsTypesF): InitialStateType => {\r\n\r\n    return state\r\n}\r\nexport default friendsReducer","import profileReducer from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialog-reducer\";\r\nimport friendsReducer from \"./friends-reducer\";\r\n\r\nexport const ADD_POST = 'ADD-POST'\r\nexport const CHANGE_NEW_POST_TEXT = 'CHANGE-NEW-POST-TEXT'\r\nexport const UPDATE_NEW_MESSAGE_BODY = 'NEW-MESSAGE-BODY'\r\nexport const SEND_MESSAGE = 'SEND-MESSAGE'\r\nexport type ActionsTypesF =\r\n    ReturnType<typeof newMessageBody> |\r\n    ReturnType<typeof sendMessage> |\r\n    ReturnType<typeof addPostAC> |\r\n    ReturnType<typeof changeNewTextAC>\r\n\r\nexport const addPostAC = () => {\r\n    return {\r\n        type: ADD_POST,\r\n    } as const\r\n}\r\nexport const changeNewTextAC = (newPost: string) => {\r\n    return {\r\n        type: CHANGE_NEW_POST_TEXT,\r\n        newPost: newPost\r\n    } as const\r\n}\r\nexport const newMessageBody = (body: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_BODY,\r\n        body: body\r\n    } as const\r\n\r\n}\r\nexport const sendMessage = () => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    } as const\r\n\r\n}\r\n\r\ntype messageType = {\r\n    message: string;\r\n    likeCount: number;\r\n    id: number\r\n}\r\ntype userType = {\r\n    id: string;\r\n    name: string;\r\n}\r\ntype messagesType = {\r\n    id: number;\r\n    messages: string;\r\n}\r\ntype sidebarType = {\r\n    id: number;\r\n    name: string;\r\n}\r\ntype profilePageType = {\r\n    message: messageType[],\r\n    newPostText: string;\r\n}\r\ntype dialogsPageType = {\r\n    users: userType[]\r\n    messages: messagesType[]\r\n    newMessageBody: string\r\n}\r\ntype sidebarsType = {\r\n    friends: sidebarType[]\r\n}\r\ntype stateRootType = {\r\n    profilePage: profilePageType\r\n    dialogsPage: dialogsPageType\r\n    sidebar: sidebarsType\r\n}\r\nexport type StoreType = {\r\n    _state: stateRootType;\r\n    _onChange: (state: stateRootType) => void;\r\n    subscribe: (observer: () => void) => void;\r\n    getState: () => stateRootType;\r\n    dispatch: (action: ActionsTypesF) => void;\r\n}\r\nlet store: StoreType = {\r\n    _state: {\r\n        profilePage: {\r\n            message: [\r\n                {id: 1, message: 'Hi, how are you?', likeCount: 22},\r\n                {id: 2, message: 'It is my first post', likeCount: 11},\r\n\r\n            ],\r\n            newPostText: ''\r\n        },\r\n        dialogsPage: {\r\n            users: [\r\n                {id: '1', name: 'Damir'},\r\n                {id: '2', name: 'Abay'},\r\n                {id: '3', name: 'Kyama'},\r\n                {id: '4', name: 'Kaidar'},\r\n                {id: '5', name: 'Aday'},\r\n\r\n            ],\r\n            messages: [\r\n                {id: 1, messages: 'Hi'},\r\n                {id: 2, messages: 'What\\'s up?'},\r\n                {id: 3, messages: 'How\\'s it going?'},\r\n\r\n            ],\r\n            newMessageBody: ''\r\n        },\r\n        sidebar: {\r\n            friends: [\r\n                {id: 1, name: 'Abay'},\r\n                {id: 2, name: 'Salta'},\r\n                {id: 3, name: 'Samal'}\r\n            ]\r\n        }\r\n    },\r\n    _onChange() {\r\n\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    subscribe(observer) {\r\n        this._onChange = observer\r\n    },\r\n    dispatch(action: ActionsTypesF) {\r\n        this._state.profilePage = profileReducer(this._state.profilePage, action)\r\n        this._state.dialogsPage = dialogReducer(this._state.dialogsPage, action)\r\n        this._state.sidebar = friendsReducer(this._state.sidebar, action)\r\n        this._onChange(this._state)\r\n\r\n    }\r\n}\r\n\r\nexport default store;\r\n\r\n\r\n\r\n","import React from 'react';\n\nimport s from './Post.module.css';\n\ntype PostPropsType={\n    message: string\n    like:number\n}\n\nfunction Post(props:PostPropsType) {\n    return (\n        <div >\n            <div className={s.item}>\n                <img src=\"https://lwlies.com/wp-content/uploads/2017/04/avatar-2009.jpg\" alt=\"\"/>\n                {props.message}\n                <div>\n                    <span>\n                        {props.like}\n                        <button>like</button>\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;\n","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css';\nimport Posts from \"./Post/Post\";\nimport {ProfilePropsType} from \"./MyPostsContainer\";\n\n\nfunction MyPosts(props: ProfilePropsType) {\n\n    let messageData = props.message.map(el => <Posts message={el.message} like={el.likeCount}/>)\n    let addPost = () => {\n        props.addPost()\n    }\n    let addPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.changeNewText(e.currentTarget.value)\n    }\n    return (\n        <div className={s.postsBLock}>\n            <h3>My posts</h3>\n            <div>\n                <div>\n                    <textarea value={props.newPostText} onChange={addPostChange}/>\n                </div>\n                <div>\n                    <button onClick={addPost}>add new post</button>\n                </div>\n            </div>\n            <div className={s.posts}>\n\n                {messageData}\n\n            </div>\n        </div>\n    );\n}\n\nexport default MyPosts;\n","import React from 'react';\nimport { addPostAC, changeNewTextAC} from \"../../../redux/store\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {messageType} from \"../../../redux/profile-reducer\";\nimport {Dispatch} from \"redux\";\n\ntype MapStateToPropsType = {\n    message: messageType[];\n    newPostText: string;\n}\n\ntype MapDispatchToPropsType = {\n    changeNewText: (text: string) => void;\n    addPost:() => void;\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state:AppStateType): MapStateToPropsType => {\n    return{\n        message: state.profilePage.message,\n        newPostText: state.profilePage.newPostText\n\n    }\n}\nconst mapDispatchToProps = (dispatch:Dispatch) :MapDispatchToPropsType => {\n    return{\n        changeNewText: (text:string) => {\n            dispatch(changeNewTextAC(text))\n        },\n        addPost: () => {\n            dispatch(addPostAC())\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;\n","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\nfunction Profile() {\n    return (\n        <div>\n            <ProfileInfo\n                pic={'https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'}/>\n            <MyPostsContainer />\n        </div>\n    );\n}\n\nexport default Profile;\n","import React from 'react'\r\nimport s from './News.module.css'\r\nfunction News(props:any){\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\nexport default News","import React from 'react'\r\nimport s from './Music.module.css'\r\nfunction Music(props:any){\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music","import React from 'react'\r\nimport s from './Settings.module.css'\r\nfunction Settings(props:any){\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings","import React from 'react'\r\nimport s from './Friends.module.css'\r\nfunction Friends(props:any){\r\n    return (\r\n        <div>\r\n            Friends\r\n        </div>\r\n    )\r\n}\r\nexport default Friends","import React from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from \"./DialogItems.module.css\";\r\n\r\ntype DialogItemsTypes = {\r\n    name:string\r\n    id:string\r\n}\r\n\r\nfunction DialogItems(props:DialogItemsTypes) {\r\n\r\n    return (\r\n        <div>\r\n            <div className={`${s.dialog} ${s.active}`}>\r\n                <img className={s.img} src=\"https://media.vanityfair.com/photos/5c5325d3cec32271820c6fc1/master/w_1600%2Cc_limit/ava-max-interview.jpg\" alt=\"\"/>\r\n                <NavLink to={'/dialogs/'+props.id}>{props.name}</NavLink>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItems","import React from 'react'\r\nimport s from \"./Message.module.css\";\r\n\r\ntype setMessageType = {\r\n    messages: string;\r\n    id: number;\r\n}\r\n\r\nfunction Message(props: setMessageType) {\r\n    return (\r\n        <div>\r\n            <div className={s.message}>\r\n                <div className={s.chat}>\r\n                    {props.messages}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React, {ChangeEvent} from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItems from \"./DialogItems/DialogItems\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\n\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n\r\n    let usersData = props.users.map(el => <DialogItems\r\n        name={el.name}\r\n        id={el.id}\r\n    />)\r\n    let messagesData = props.messages.map(el => <Message\r\n        messages={el.messages}\r\n        id={el.id}\r\n    />)\r\n    let createMessageBody = props.newMessageBody\r\n    let onNewMessageClick = () => {\r\n        props.sendMessage()\r\n    }\r\n    let onSendMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updatedMessageBody(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n\r\n                {usersData}\r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                <div> {messagesData}</div>\r\n                <div>\r\n                    <div><textarea\r\n                        value={createMessageBody}\r\n                        placeholder={'Enter your message'}\r\n                        onChange={onSendMessageChange}\r\n                    ></textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={onNewMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from 'react'\r\nimport {Dispatch} from \"redux\";\r\nimport {newMessageBody, sendMessage} from \"../../redux/store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {messagesType, userType} from \"../../redux/dialog-reducer\";\r\n\r\ntype MapStateToPropsType = {\r\n    users: userType[];\r\n    messages: messagesType[];\r\n    newMessageBody: string;\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    updatedMessageBody: (text:string) => void;\r\n    sendMessage: () => void;\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) :MapStateToPropsType => {\r\n    return {\r\n        users:state.dialogPage.users,\r\n        messages:state.dialogPage.messages,\r\n        newMessageBody:state.dialogPage.newMessageBody\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:Dispatch) : MapDispatchToPropsType => {\r\n    return {\r\n        updatedMessageBody: (text:string) => {\r\n            dispatch(newMessageBody(text))\r\n        },\r\n        sendMessage: () => {\r\n            dispatch(sendMessage())\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default DialogsContainer","import React from 'react';\nimport Header from './components/Header/Header'\nimport Navbar from './components/Navbar/Navbar'\nimport Profile from './components/Profile/Profile'\nimport './App.css';\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport Friends from \"./components/Friends/Friends\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className=\"app-wrapper\">\n                <Header/>\n                <Navbar/>\n                <div className={'app-wrapper-content'}>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/profile' render={() => <Profile/>}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                    <Route path='/friends' render={() => <Friends/>}/>\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","import {combineReducers,createStore} from 'redux';\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialog-reducer\";\r\nimport friendsReducer from \"./friends-reducer\";\r\nimport {StoreType} from \"./store\";\r\n\r\ndeclare global {\r\n    interface Window {store: any}\r\n}\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sideBarPage: friendsReducer\r\n})\r\n\r\nexport type AppStateType =ReturnType<typeof rootReducer>\r\n\r\nlet store:StoreType = createStore(rootReducer);\r\nwindow.store = window.store || {}\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}