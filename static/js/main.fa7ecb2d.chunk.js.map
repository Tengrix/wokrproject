{"version":3,"sources":["components/Dialogs/DialogItems/DialogItems.module.css","components/Dialogs/Dialogs.module.css","components/Users/UsersApiComponent.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Friends/Friends.tsx","redux/dialog-reducer.tsx","components/Dialogs/DialogItems/DialogItems.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirectComponent.tsx","components/Dialogs/DialogsContainer.tsx","api/api.ts","redux/users-reducer.ts","components/Users/Users.tsx","Pics/Iphone-spinner-2.gif","components/common/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","redux/profile-reducer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","redux/friends-reducer.tsx","redux/redux-store.ts","index.tsx"],"names":["module","exports","Navbar","className","s","nav","item","to","activeClassName","activeLink","itemFriends","News","props","Music","Settings","Friends","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","initialState","users","id","name","messages","newMessageBody","dialogReducer","state","action","type","body","DialogItems","dialog","active","img","src","alt","Message","message","chat","Dialogs","dialogPage","usersData","map","el","messagesData","createMessageBody","dialogs","value","placeholder","onChange","e","updatedMessageBody","currentTarget","onClick","sendMessage","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirectComponent","Component","connect","restProps","compose","withRouter","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageCount","get","then","response","data","userId","console","warn","profileAPI","getProfile","post","delete","authAPI","getStatus","updateStatus","status","put","totalUsersCount","isFetching","isFollowing","setToggleFetching","setToggleFollowing","usersReducer","followed","pageNumber","filter","Users","pagesCount","Math","ceil","pages","i","push","selectedPage","onPageChanged","photoUrl","disabled","some","UnFollowFriend","FollowFriend","Preloader","preloader","UsersAPIComponent","getUser","this","React","usersPage","dispatch","resultCode","follow","unfollow","setCurrentPage","items","totalCount","ADD_POST","CHANGE_NEW_POST_TEXT","likeCount","newPostText","profile","setStatus","updateProfileStatus","profileReducer","newPost","ProfileStatus","useDispatch","useState","editMode","setEditMode","title","setTitle","useEffect","autoFocus","onBlur","onDoubleClick","ProfileInfo","descriptionBlock","fullName","photos","small","contacts","vk","github","facebook","twitter","website","instagram","lookingForAJob","lookingForAJobDescription","Post","like","MyPosts","messageData","postsBLock","changeNewText","addPost","posts","MyPostsContainer","profilePage","text","Profile","ProfileContainer","match","params","GetProfile","getProfileStatus","Header","header","loginBlock","login","email","setAuthUserData","authReducer","HeaderContainer","FollowOrUnfollow","Login","App","path","render","DialogsContainer","component","UsersContainer","friends","friendsReducer","rootReducer","combineReducers","sideBarPage","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fa7ecb2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogItems_dialogsItems__2fZHv\",\"active\":\"DialogItems_active__2ISGM\",\"img\":\"DialogItems_img__3cAL3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__IcOa7\",\"messages\":\"Dialogs_messages__2ipxb\",\"message\":\"Dialogs_message__2cCpI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"UsersApiComponent_img__hQbIU\",\"selectedPage\":\"UsersApiComponent_selectedPage__2oxjD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBLock\":\"MyPosts_postsBLock__2XgTU\",\"posts\":\"MyPosts_posts__2c1oP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3kPns\",\"loginBlock\":\"Header_loginBlock__2AcFW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2Y1mw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__12Fn7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2LvmE\",\"item\":\"Navbar_item__3Z4YA\",\"activeLink\":\"Navbar_activeLink__E3EjW\",\"itemFriends\":\"Navbar_itemFriends__ukrFy\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Navbar.module.css';\n\ntype NavbarType = {\n\n}\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={`${s.item}`}>\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\n            </div>\n            <div className={s.itemFriends}>\n                <NavLink to='/friends' activeClassName={s.activeLink}>Friends</NavLink>\n            </div>\n            <span className={s.itemFriends}>\n                <NavLink to='/Abay' activeClassName={s.activeLink}> Aboy </NavLink>\n            </span>\n\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react'\r\nimport s from './News.module.css'\r\nfunction News(props:any){\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\nexport default News","import React from 'react'\r\nfunction Music(props:any){\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music","import React from 'react'\r\nimport s from './Settings.module.css'\r\nfunction Settings(props:any){\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings","import React from 'react'\r\nfunction Friends(){\r\n    return (\r\n        <div>\r\n            Friends\r\n        </div>\r\n    )\r\n}\r\nexport default Friends","type ActionsTypesF =\r\n    ReturnType<typeof updatedMessageBody> |\r\n    ReturnType<typeof sendMessage>\r\n\r\nexport const UPDATE_NEW_MESSAGE_BODY = 'NEW-MESSAGE-BODY'\r\nexport const SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\nexport type messagesType = {\r\n    id: number;\r\n    messages: string;\r\n}\r\nexport type userType = {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\n\r\nexport type InitialStateType = {\r\n    users: userType[]\r\n    messages: messagesType[]\r\n    newMessageBody: string\r\n}\r\nlet initialState: InitialStateType = {\r\n    users: [\r\n        {id: '1', name: 'Damir'},\r\n        {id: '2', name: 'Abay'},\r\n        {id: '3', name: 'Kyama'},\r\n        {id: '4', name: 'Kaidar'},\r\n        {id: '5', name: 'Aday'},\r\n\r\n    ] as userType[],\r\n    messages: [\r\n        {id: 1, messages: 'Hi'},\r\n        {id: 2, messages: 'What\\'s up?'},\r\n        {id: 3, messages: 'How\\'s it going?'},\r\n\r\n    ] as messagesType[],\r\n    newMessageBody: ''\r\n}\r\n\r\nexport const dialogReducer = (state: InitialStateType = initialState, action: ActionsTypesF):InitialStateType => {\r\n    switch (action.type){\r\n        case UPDATE_NEW_MESSAGE_BODY:\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            }\r\n        case SEND_MESSAGE:\r\n            let body = state.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id:6, messages: body} ],\r\n                newMessageBody: ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const updatedMessageBody= (body: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_BODY,\r\n        body: body\r\n    } as const\r\n\r\n}\r\nexport const sendMessage = () => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    } as const\r\n\r\n}\r\n// type dialogReducerAT = sendMessageAType|updateMessageAT\r\n// export type sendMessageAType = {\r\n//     type:'SEND-MESSAGE'\r\n//     id: number;\r\n//     title: string;\r\n// }\r\n// export type updateMessageAT = {\r\n//     type: 'NEW-MESSAGE-BODY'\r\n//     body: string\r\n// }\r\n// export const sendMessageAC = (id:number, title:string):sendMessageAType => {\r\n//     return {type: 'SEND-MESSAGE', id, title}\r\n// }\r\n// export const updateMessageAC = (body:string):updateMessageAT => {\r\n//     return {type: 'NEW-MESSAGE-BODY', body}\r\n// }\r\n\r\nexport default dialogReducer","import React from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from \"./DialogItems.module.css\";\r\n\r\ntype DialogItemsTypes = {\r\n    name:string\r\n    id:string\r\n}\r\n\r\nfunction DialogItems(props:DialogItemsTypes) {\r\n\r\n    return (\r\n        <div>\r\n            <div className={`${s.dialog} ${s.active}`}>\r\n                <img className={s.img} src=\"https://media.vanityfair.com/photos/5c5325d3cec32271820c6fc1/master/w_1600%2Cc_limit/ava-max-interview.jpg\" alt=\"\"/>\r\n                <NavLink to={'/dialogs/'+props.id}>{props.name}</NavLink>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItems","import React from 'react'\r\nimport s from \"./Message.module.css\";\r\n\r\ntype setMessageType = {\r\n    messages: string;\r\n    id: number;\r\n}\r\n\r\nfunction Message(props: setMessageType) {\r\n    return (\r\n        <div>\r\n            <div className={s.message}>\r\n                <div className={s.chat}>\r\n                    {props.messages}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React, {ChangeEvent} from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItems from \"./DialogItems/DialogItems\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n    let state = props.dialogPage\r\n\r\n    let usersData = state.users.map(el => <DialogItems\r\n        key={el.id}\r\n        name={el.name}\r\n        id={el.id}\r\n    />)\r\n    let messagesData = state.messages.map(el => <Message\r\n        key={el.id}\r\n        messages={el.messages}\r\n        id={el.id}\r\n    />)\r\n    let createMessageBody = state.newMessageBody\r\n    let onNewMessageClick = () => {\r\n        props.sendMessage()\r\n    }\r\n    let onSendMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updatedMessageBody(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div>\r\n\r\n                {usersData}\r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                <div> {messagesData}</div>\r\n                <div>\r\n                    <div><textarea\r\n                        value={createMessageBody}\r\n                        placeholder={'Enter your message'}\r\n                        onChange={onSendMessageChange}\r\n                    ></textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={onNewMessageClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsType2 = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType) :MapStateToPropsType2 =>{\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport function withAuthRedirectComponent <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props:MapStateToPropsType2) => {\r\n        let {isAuth, ...restProps} = props\r\n        if(!isAuth) return <Redirect to='login'/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    InitialStateType, sendMessage, updatedMessageBody,\r\n} from \"../../redux/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {compose} from 'redux'\r\nimport {withAuthRedirectComponent} from \"../../hoc/WithAuthRedirectComponent\";\r\nimport {withRouter} from \"react-router\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    updatedMessageBody: (text:string) => void;\r\n    sendMessage: () => void;\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\nlet mapStateToProps = (state:AppStateType) : MapStateToPropsType => ({\r\n    dialogPage:state.dialogPage\r\n})\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n        {updatedMessageBody,sendMessage}),\r\n    withRouter,withAuthRedirectComponent)(Dialogs)","import axios from \"axios\";\r\nimport {ProfileType} from \"../redux/profile-reducer\";\r\nimport {UsersType} from \"../redux/users-reducer\";\r\nimport {setUserDataType} from \"../redux/auth-reducer\";\r\n\r\ntype CommonResponseType<T> = {\r\n    data:T;\r\n    resultCode:number;\r\n    messages:string[];\r\n    fieldsErrors:string[];\r\n\r\n}\r\n\r\nexport type GetUsersType = {\r\n    error: string;\r\n    totalCount: number;\r\n    items: UsersType[]\r\n}\r\n\r\ntype GetAuthType = {\r\n    data:setUserDataType\r\n    resultCode: number;\r\n    messages: string[];\r\n    fieldsErrors: string[];\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials:true,\r\n    headers:{\r\n        'API-KEY': '1eaa5d66-d310-487c-a1d0-2fd59af6c2de'\r\n    }\r\n})\r\nexport const usersAPI = {\r\n    getUsers (currentPage:number,pageCount:number) {\r\n        return  instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageCount}`).then(response=> {\r\n            return response.data\r\n        })\r\n    },\r\n    getProfile (userId:number)  {\r\n        console.warn('Obsolete method. Please use profileApi object.')\r\n        return profileAPI.getProfile(userId)\r\n   },\r\n\r\n    FollowFriends(id:number){\r\n        return instance.post<CommonResponseType<{}>>(`follow/${id}`).then(response=>response.data)\r\n    },\r\n    UnFollowFriends(id:number){\r\n        return instance.delete<CommonResponseType<{}>>(`follow/${id}`).then(response=>response.data)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    getAuthMe (){\r\n        return instance.get<GetAuthType>(`auth/me`).then(response=>response.data)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile (userId:number)  {\r\n        return  instance.get<ProfileType>(`profile/`+ userId)\r\n    },\r\n    getStatus (userId:number) {\r\n        return instance.get<any>('profile/status/'+userId)\r\n    },\r\n    updateStatus (status:string) {\r\n        return instance.put<CommonResponseType<{data:string}>>('profile/status',{status})\r\n    }\r\n}","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ActionsTypesF =\r\n    ReturnType<typeof follow>|\r\n    ReturnType<typeof unfollow>|\r\n    ReturnType<typeof setUser>|\r\n    ReturnType<typeof setCurrentPage>|\r\n    ReturnType<typeof setTotalUsersCount>|\r\n    ReturnType<typeof setToggleFetching>|\r\n    ReturnType<typeof setToggleFollowing>\r\n\r\nexport type UsersPhotoType = {\r\n    small: string;\r\n    large: string;\r\n}\r\n\r\nexport type UsersType = {\r\n    id:number;\r\n    photoUrl:string\r\n    name:string;\r\n    status:string\r\n    followed:boolean\r\n    photos:UsersPhotoType;\r\n}\r\nexport type InitialStateType = {\r\n    users: UsersType[]\r\n    pageCount:number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFollowing: number[]\r\n}\r\nexport type followAT = {\r\n    type:'FOLLOW'\r\n    userId:number\r\n}\r\nexport type unfollowAT = {\r\n    type:'UNFOLLOW'\r\n    userId:number\r\n}\r\nexport type setUserAT = {\r\n    type:'SET-USERS'\r\n    users:UsersType[]\r\n}\r\nexport type setPageAT = {\r\n    type: 'SET-PAGE'\r\n    pageNumber: number\r\n}\r\nexport type setTotalUsersCountAT = {\r\n    type: 'SET-TOTAL-USERS'\r\n    totalUsersCount:number\r\n}\r\nexport type setToggleFetching = {\r\n    type: 'SET-TOGGLE-FETCHING'\r\n    isFetching: boolean\r\n}\r\nexport type setToggleFollowing = {\r\n    type: 'SET-TOGGLE-FOLLOWING'\r\n    id:number\r\n    isFetching: boolean;\r\n}\r\nlet initialState : InitialStateType = {\r\n    users: [] as UsersType[],\r\n    pageCount: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowing: []\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsTypesF): InitialStateType => {\r\n    switch (action.type){\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(el => el.id === action.userId ? {...el, followed:true}:el)}\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(el => el.id === action.userId ? {...el, followed:false}:el)\r\n            }\r\n        case \"SET-USERS\":\r\n            return {\r\n                ...state, users:action.users\r\n            }\r\n        case 'SET-PAGE':\r\n            return {\r\n                ...state, currentPage:action.pageNumber\r\n            }\r\n        case \"SET-TOTAL-USERS\":\r\n            return {\r\n                ...state, totalUsersCount: action.totalUsersCount\r\n            }\r\n        case \"SET-TOGGLE-FETCHING\":\r\n            return {\r\n                ...state, isFetching:action.isFetching\r\n            }\r\n        case \"SET-TOGGLE-FOLLOWING\":\r\n            return {\r\n                ...state,\r\n                isFollowing: action.isFetching?[...state.isFollowing, action.id]:\r\n                    state.isFollowing.filter(el=> el!=action.id)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const follow = (userId:number):followAT => {\r\n    return {\r\n        type:'FOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport const unfollow = (userId:number):unfollowAT => {\r\n    return {\r\n        type:'UNFOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport const setUser = (users:UsersType[]):setUserAT => {\r\n    return{\r\n        type:'SET-USERS',\r\n        users\r\n    } as const\r\n}\r\nexport const setCurrentPage = (pageNumber:number):setPageAT =>{\r\n    return {\r\n        type:'SET-PAGE',\r\n        pageNumber\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount:number):setTotalUsersCountAT =>{\r\n    return {\r\n        type:'SET-TOTAL-USERS',\r\n        totalUsersCount\r\n    } as const\r\n}\r\nexport const setToggleFetching = (isFetching: boolean):setToggleFetching => {\r\n    return {\r\n        type: \"SET-TOGGLE-FETCHING\",\r\n        isFetching\r\n    }as const\r\n}\r\nexport const setToggleFollowing = (isFetching:boolean, id:number): setToggleFollowing => {\r\n    return{\r\n        type: 'SET-TOGGLE-FOLLOWING',\r\n        id,\r\n        isFetching\r\n    } as const\r\n}\r\n\r\nexport const getUser = (currentPage:number, pageCount:number) => {\r\n    return (dispatch:Dispatch) => {\r\n        dispatch(setToggleFetching(true));\r\n        usersAPI.getUsers(currentPage,pageCount).then(response => {\r\n            dispatch(setToggleFetching(false))\r\n            dispatch(setUser(response.items))\r\n            dispatch(setTotalUsersCount(response.totalCount))\r\n        })\r\n    }\r\n}\r\n\r\nexport const FollowFriend = (userId:number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setToggleFollowing(true,userId))\r\n        usersAPI.FollowFriends(userId).then(response => {\r\n            if (response.resultCode == 0) {\r\n               dispatch( follow(userId))\r\n            }\r\n            dispatch(setToggleFollowing(false, userId))\r\n        })\r\n    }\r\n}\r\nexport const UnFollowFriend = (userId:number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setToggleFollowing(true,userId))\r\n        usersAPI.UnFollowFriends(userId).then(response => {\r\n            if (response.resultCode === 0) {\r\n                dispatch(unfollow(userId))\r\n            }\r\n            dispatch(setToggleFollowing(false, userId))\r\n        })\r\n    }\r\n}\r\nexport default usersReducer","import React from 'react'\r\nimport s from \"./UsersApiComponent.module.css\";\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\n\r\ntype onPageChangedType = {\r\n    onPageChanged: (page: number) => void\r\n}\r\nexport type UsersPresentPropsType = UsersPropsType & onPageChangedType\r\nlet Users = (props: UsersPresentPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageCount)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(el => {\r\n                return <span className={props.currentPage === el ? s.selectedPage : ''}\r\n                             onClick={() => props.onPageChanged(el)}>{el}</span>\r\n            })}\r\n\r\n        </div>\r\n        {\r\n            props.users.map(el => <div key={el.id}>\r\n                    <span>\r\n                        <div>\r\n\r\n                            <img className={s.img}\r\n                                 src={el.photoUrl != null ? el.photoUrl : 'https://i.pinimg.com/originals/51/f6/fb/51f6fb256629fc755b8870c801092942.png'}\r\n                                 alt=\"\"/>\r\n\r\n                        </div>\r\n                        <div>\r\n\r\n                            {el.followed ?\r\n                                <button disabled={props.isFollowing.some(id=> id==el.id)} onClick={() => {\r\n                                    props.UnFollowFriend(el.id )\r\n                                }}>unfollow</button>\r\n                                : <button disabled={props.isFollowing.some(id=> id==el.id)} onClick={() => {\r\n                                    props.FollowFriend(el.id)\r\n                                }}>follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                <span>\r\n                            <span>\r\n                                <div>{el.name}</div>\r\n                                <div>{el.status}</div>\r\n                            </span>\r\n                    </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\nexport default Users","export default __webpack_public_path__ + \"static/media/Iphone-spinner-2.d3fbaf2b.gif\";","import React from \"react\";\r\n\r\nimport preloader from './../../../Pics/Iphone-spinner-2.gif'\r\n\r\n\r\nconst Preloader = () =>{\r\n    return <div>\r\n        <img src={preloader} alt=\"\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    UsersType,\r\n    setCurrentPage,\r\n    setToggleFollowing, getUser, FollowFriend, UnFollowFriend\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"react-router\";\r\nimport {withAuthRedirectComponent} from \"../../hoc/WithAuthRedirectComponent\";\r\nimport {GetProfile} from \"../../redux/profile-reducer\";\r\n\r\nexport type MapStateToPropsType = {\r\n    users: UsersType[];\r\n    pageCount: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFollowing: number[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUser: (currentPage: number, pageCount: number) => void\r\n    FollowFriend: (id: number) => void;\r\n    UnFollowFriend: (id: number) => void;\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass UsersAPIComponent extends React.Component<UsersPropsType, UsersPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUser(this.props.currentPage, this.props.pageCount)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUser(pageNumber, this.props.pageCount)\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users currentPage={this.props.currentPage}\r\n                   pageCount={this.props.pageCount}\r\n                   totalUsersCount={this.props.totalUsersCount}\r\n                   users={this.props.users}\r\n                   onPageChanged={this.onPageChanged}\r\n                   isFetching={this.props.isFetching}\r\n                   isFollowing={this.props.isFollowing}\r\n                   FollowFriend={this.props.FollowFriend}\r\n                   UnFollowFriend={this.props.UnFollowFriend}\r\n                   getUser={this.props.getUser}/>\r\n        </div>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageCount: state.usersPage.pageCount,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        isFollowing: state.usersPage.isFollowing\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        FollowFriend,\r\n        UnFollowFriend,\r\n        setCurrentPage,\r\n        setToggleFollowing,\r\n        getUser\r\n    }),\r\n    withRouter, withAuthRedirectComponent)\r\n(UsersAPIComponent)\r\n// const UsersContainer = connect(mapStateToProps, {\r\n//     FollowFriend,\r\n//     UnFollowFriend,\r\n//     setCurrentPage,\r\n//     setToggleFollowing,\r\n//     getUser\r\n// })(UsersAPIComponent);\r\n//\r\n// export default UsersContainer","import {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\ntype ActionsTypesF =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof changeNewText>|\r\n    ReturnType<typeof setProfile>|\r\n    ReturnType<typeof setStatus>\r\n\r\nexport const ADD_POST = 'ADD-POST'\r\nexport const CHANGE_NEW_POST_TEXT = 'CHANGE-NEW-POST-TEXT'\r\n\r\nexport type messageType = {\r\n    message: string;\r\n    likeCount: number;\r\n    id: number;\r\n}\r\n\r\ntype ProfilePhotoType = {\r\n    small:string\r\n    large:string\r\n}\r\ntype addPostType = {\r\n    type: 'ADD-POST'\r\n}\r\ntype changeNewText = {\r\n    type: 'CHANGE-NEW-POST-TEXT'\r\n    newPost: string\r\n}\r\ntype setProfile = {\r\n    type: 'SET-PROFILE'\r\n    profile:ProfileType\r\n}\r\ntype setStatus = {\r\n    type: 'SET-STATUS'\r\n    status: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string;\r\n    fullName: string;\r\n    contacts: {\r\n        github:string;\r\n        vk: string;\r\n        facebook: string;\r\n        instagram: string;\r\n        twitter: string;\r\n        website:string;\r\n        youtube: string;\r\n        mainLink: string;\r\n    }\r\n    photos:ProfilePhotoType\r\n}\r\n\r\nexport type InitialStateType = {\r\n    message: messageType[];\r\n    newPostText: string;\r\n    profile: ProfileType | null;\r\n    status:string;\r\n}\r\n\r\nlet initialState : InitialStateType = {\r\n    message: [\r\n        {id: 1, message: 'Hi, how are you?', likeCount: 22},\r\n        {id: 2, message: 'It is my first post', likeCount: 11},\r\n\r\n    ]as messageType[] ,\r\n    newPostText: '',\r\n    profile: null,\r\n    status:''\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsTypesF): InitialStateType => {\r\n    switch (action.type){\r\n        case ADD_POST:{\r\n            const newPost: messageType = {\r\n                id: 3,\r\n                message: state.newPostText,\r\n                likeCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                message: [...state.message, newPost],\r\n                newPostText: ''\r\n            };\r\n        }\r\n        case CHANGE_NEW_POST_TEXT:{\r\n            return{\r\n                ...state,\r\n                newPostText:action.newPost\r\n            }\r\n        }\r\n        case \"SET-PROFILE\":\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case \"SET-STATUS\":\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const addPost = ():addPostType => {\r\n    return {\r\n        type: ADD_POST,\r\n    } as const\r\n}\r\nexport const changeNewText = (newPost: string):changeNewText => {\r\n    return {\r\n        type: CHANGE_NEW_POST_TEXT,\r\n        newPost\r\n    } as const\r\n}\r\nexport const setProfile = (profile:ProfileType):setProfile => {\r\n    return {\r\n        type: 'SET-PROFILE',\r\n        profile\r\n    } as const\r\n}\r\nexport const setStatus = (status:string):setStatus => {\r\n    return{\r\n        type: 'SET-STATUS',\r\n        status\r\n    } as const\r\n}\r\nexport const GetProfile=(userId:number)=>{\r\n    return (dispatch:Dispatch) =>{\r\n        usersAPI.getProfile(userId).then(response=>{\r\n           dispatch(setProfile(response.data))\r\n        })\r\n    }\r\n}\r\nexport const getProfileStatus = (userId:number) => {\r\n    return (dispatch:Dispatch) => {\r\n        profileAPI.getStatus(userId).then(response => {\r\n            dispatch(setStatus(response.data))\r\n        })\r\n    }\r\n}\r\nexport const updateProfileStatus = (status:string) => {\r\n    return (dispatch:Dispatch) => {\r\n        profileAPI.updateStatus(status).then(response => {\r\n            if(response.data.resultCode===0){\r\n                dispatch(setStatus(status))\r\n            }\r\n\r\n        })\r\n    }\r\n}\r\nexport default profileReducer","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateProfileStatus} from \"../../../redux/profile-reducer\";\r\ntype ProfileStatusPropsType = {\r\n    status: string;\r\n    updateProfileStatus: (status:string) => void;\r\n}\r\n\r\nfunction ProfileStatus(props: ProfileStatusPropsType) {\r\n    const dispatch = useDispatch()\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.status);\r\n    useEffect(() =>{\r\n         dispatch(updateProfileStatus)\r\n    },[title])\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.status);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.updateProfileStatus(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode ?\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={changeTitle} autoFocus={true} onBlur={activateViewMode} type=\"text\" value={title}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatus","import React from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from './ProfileStatus'\r\ntype ProfileInfoType = {\r\n    profile:ProfileType\r\n    status: string;\r\n    updateProfileStatus: (status:string) => void;\r\n}\r\n\r\nfunction ProfileInfo(props:ProfileInfoType){\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            {/*<div>*/}\r\n            {/*    <img src={props.pic}/>*/}\r\n            {/*</div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <p>\r\n                    {props.profile.fullName}\r\n                </p>\r\n                <div>\r\n                    <img src={props.profile.photos.small} alt=\"\"/>\r\n                    <ProfileStatus status={props.status} updateProfileStatus={props.updateProfileStatus} />\r\n                </div>\r\n\r\n                <span> Я будущий спец в IT-INDUSTRY</span>\r\n                <div>\r\n                    <div>{props.profile.contacts.vk} </div>\r\n                    <div>{props.profile.contacts.github} </div>\r\n                    <div>{props.profile.contacts.facebook}</div>\r\n                    <div>{props.profile.contacts.twitter} </div>\r\n                    <div>{props.profile.contacts.website} </div>\r\n                    <div>{props.profile.contacts.instagram} </div>\r\n                </div>\r\n                <div>\r\n                    {props.profile.lookingForAJob}\r\n                </div>\r\n                <div>\r\n                    {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo","import React from 'react';\n\nimport s from './Post.module.css';\n\ntype PostPropsType={\n    message: string\n    like:number\n}\n\nfunction Post(props:PostPropsType) {\n    return (\n        <div >\n            <div className={s.item}>\n                <img src=\"https://lwlies.com/wp-content/uploads/2017/04/avatar-2009.jpg\" alt=\"\"/>\n                {props.message}\n                <div>\n                    <span>\n                        {props.like}\n                        <button>like</button>\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;\n","import React, {ChangeEvent} from 'react';\nimport s from './MyPosts.module.css';\nimport Posts from \"./Post/Post\";\nimport {ProfilePropsType} from \"./MyPostsContainer\";\n\n\nfunction MyPosts(props: ProfilePropsType) {\n\n    let messageData = props.message.map(el => <Posts message={el.message} like={el.likeCount}/>)\n    let addPost = () => {\n        props.addPost()\n    }\n    let addPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        props.changeNewText(e.currentTarget.value)\n    }\n    return (\n        <div className={s.postsBLock}>\n            <h3>My posts</h3>\n            <div>\n                <div>\n                    <textarea value={props.newPostText} onChange={addPostChange}/>\n                </div>\n                <div>\n                    <button onClick={addPost}>add new post</button>\n                </div>\n            </div>\n            <div className={s.posts}>\n\n                {messageData}\n\n            </div>\n        </div>\n    );\n}\n\nexport default MyPosts;\n","import React from 'react';\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {addPost, changeNewText, messageType} from \"../../../redux/profile-reducer\";\nimport {Dispatch} from \"redux\";\n\ntype MapStateToPropsType = {\n    message: messageType[];\n    newPostText: string;\n}\n\ntype MapDispatchToPropsType = {\n    changeNewText: (text: string) => void;\n    addPost:() => void;\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state:AppStateType): MapStateToPropsType => {\n    return{\n        message: state.profilePage.message,\n        newPostText: state.profilePage.newPostText\n\n    }\n}\nconst mapDispatchToProps = (dispatch:Dispatch) :MapDispatchToPropsType => {\n    return{\n        changeNewText: (text:string) => {\n            dispatch(changeNewText(text))\n        },\n        addPost: () => {\n            dispatch(addPost())\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;\n","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/profile-reducer\";\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType\n    status: string\n    updateProfileStatus:(status:string) => void;\n}\ntype MainProfilePropsType = ProfilePropsType & ProfileContainerPropsType\n\nfunction Profile(props: MainProfilePropsType) {\n    return (\n        <div>\n            <ProfileInfo\n                profile={props.profile}\n                // pic={'https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'}\n                status={props.status}\n                updateProfileStatus={props.updateProfileStatus}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\nexport default Profile;\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {GetProfile, getProfileStatus, ProfileType, updateProfileStatus} from \"../../redux/profile-reducer\";\r\nimport {compose} from 'redux'\r\nimport {withAuthRedirectComponent} from \"../../hoc/WithAuthRedirectComponent\";\r\nimport {withRouter} from \"react-router\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile:ProfileType | null;\r\n    status: string;\r\n}\r\ntype MapStateDispatchToPropsType = {\r\n    GetProfile:(userId:number) => void;\r\n    getProfileStatus:(userId:number) => void;\r\n    updateProfileStatus:(status:string) => void;\r\n}\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapStateDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component <any, any> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if(!userId){\r\n            userId = 16786\r\n        }\r\n        this.props.GetProfile(userId)\r\n        this.props.getProfileStatus(userId)\r\n    }\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     GetProfile={this.props.GetProfile}\r\n                     status={this.props.status}\r\n                     getProfileStatus={this.props.getProfileStatus}\r\n                     updateProfileStatus={this.props.updateProfileStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state:AppStateType):MapStateToPropsType => {\r\n    return {\r\n        profile:state.profilePage.profile,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n    {GetProfile, getProfileStatus,updateProfileStatus}),\r\n     withRouter) //withAuthRedirectComponent\r\n(ProfileContainer)","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Header.module.css';\nimport {HeaderContainerTypeProps} from \"./HeaderContainer\";\n\nfunction Header(props:HeaderContainerTypeProps) {\n  return (\n    <header className={s.header}>\n      <img src=\"https://www.freelogodesign.org/Content/img/logo-ex-7.png\" alt=\"\"/>\n        <div className={s.loginBlock}>\n            {props.isAuth? props.login : <NavLink to={'/login'}>Login</NavLink>}\n        </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, usersAPI} from \"../api/api\";\r\n\r\ntype ActionsTypesF =\r\n    ReturnType<typeof setAuthUserData>|\r\n    ReturnType<typeof setToggleFetching>\r\n\r\nexport type setUserDataType = {\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null\r\n}\r\nexport type setToggleFetching = {\r\n    type: 'SET-TOGGLE-FETCHING'\r\n    isFetching:boolean\r\n}\r\nexport type setUserDataTypeAT = {\r\n    type: 'SET-USER-DATA'\r\n    data: setUserDataType\r\n}\r\n\r\nexport type InitialStateType = {\r\n    data: setUserDataType\r\n    isFetching: boolean;\r\n    isAuth: boolean;\r\n    resultCode: number;\r\n    messages: string[];\r\n}\r\nlet initialState: InitialStateType = {\r\n    data:{\r\n        id:null,\r\n        email:null,\r\n        login: null\r\n    },\r\n    isFetching: false,\r\n    isAuth: false,\r\n    resultCode: 0,\r\n    messages: ['']\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsTypesF): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                data: action.data,\r\n                isAuth:true\r\n            }\r\n        case \"SET-TOGGLE-FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setAuthUserData = ( id: number|null, email: string|null, login: string|null) : setUserDataTypeAT  => {\r\n    return {\r\n        type: 'SET-USER-DATA',\r\n        data:{id, email, login}\r\n    } as const\r\n}\r\nexport const setToggleFetching = (isFetching: boolean):setToggleFetching => {\r\n    return {\r\n        type: \"SET-TOGGLE-FETCHING\",\r\n        isFetching\r\n    }as const\r\n}\r\n\r\nexport const FollowOrUnfollow = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.getAuthMe().then(response=> {\r\n            dispatch(setToggleFetching(false))\r\n            if(response.resultCode===0){\r\n                let {id,login,email} = response.data\r\n                dispatch(setAuthUserData(id,login,email))\r\n                dispatch(setToggleFetching(true))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default authReducer","import React from 'react'\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {FollowOrUnfollow, setAuthUserData, setToggleFetching, setUserDataType} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype mapDispatchToProps = {\r\n    setAuthUserData: (data: setUserDataType) => void;\r\n    setToggleFetching: (isFetching: boolean) => void;\r\n    FollowOrUnfollow:() => void;\r\n}\r\nexport type HeaderContainerTypeProps = mapStateToPropsType & mapDispatchToProps\r\nclass HeaderContainer extends React.Component<any, any>{\r\n    componentDidMount() {\r\n        this.props.FollowOrUnfollow()\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}\r\n                       login={this.props.login}\r\n                       isAuth={this.props.isAuth}\r\n                       setAuthUserData={this.props.setAuthUserData}\r\n                       setToggleFetching={this.props.setToggleFetching}\r\n                       FollowOrUnfollow={this.props.FollowOrUnfollow}\r\n        />\r\n    }\r\n}\r\nlet mapStateToProps = (state:AppStateType): mapStateToPropsType => {\r\n    return{\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.data.login,\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps,{setAuthUserData,setToggleFetching,FollowOrUnfollow}) (HeaderContainer)","import React from 'react'\r\n\r\nconst Login = () => {\r\n\r\n    return <h1> Login </h1>\r\n}\r\n\r\nexport default Login","import React from 'react';\nimport Navbar from './components/Navbar/Navbar'\nimport './App.css';\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport Friends from \"./components/Friends/Friends\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\n\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n                <div className={'app-wrapper-content'}>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                    <Route path='/friends' render={() => <Friends/>}/>\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","type ActionsTypesF = {\r\n\r\n}\r\ntype sidebarType = {\r\n    id: number;\r\n    name: string;\r\n}\r\nexport type InitialStateType = {\r\n    friends: sidebarType[]\r\n}\r\nlet initialState: InitialStateType = {\r\n    friends: [\r\n        {id: 1, name: 'Abay'},\r\n        {id: 2, name: 'Karik'}\r\n    ]\r\n}\r\n\r\nexport const friendsReducer = (state:InitialStateType = initialState, action:ActionsTypesF): InitialStateType => {\r\n\r\n    return state\r\n}\r\nexport default friendsReducer","import {applyMiddleware,combineReducers,createStore} from 'redux';\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialog-reducer\";\r\nimport friendsReducer from \"./friends-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\ndeclare global {\r\n    interface Window {store: any}\r\n}\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sideBarPage: friendsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type AppStateType =ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware)) ;\r\nwindow.store = window.store || {}\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}