{"version":3,"sources":["components/common/FormController/FormControl.module.css","components/common/FormController/FormController.tsx","components/utils/validators/validator.ts","Pics/51f6fb256629fc755b8870c801092942.png","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","TextArea","input","meta","props","TextAreaError","touched","error","className","s","formControl","InputArea","requiredField","value","maxLengthCreator","maxLength","length","ProfileStatus","dispatch","useDispatch","useState","editMode","setEditMode","status","title","setTitle","useEffect","updateProfileStatus","onChange","e","currentTarget","autoFocus","onBlur","type","onDoubleClick","ProfileData","edit","setEdit","profile","lookingForAJob","setLookingForAJob","useSelector","state","profilePage","console","log","aboutMe","formik","useFormik","initialValues","userId","fullName","lookingForAJobDescription","contacts","vk","github","instagram","facebook","twitter","website","youtube","mainLink","onSubmit","values","saveUserProfile","resetForm","isOwner","onClick","handleSubmit","defaultValue","getFieldProps","errors","style","color","target","checked","Object","keys","map","key","i","ProfileInfo","descriptionBlock","src","photos","large","userPhoto","alt","files","saveUserPhoto","Preloader","Post","item","message","like","MyPosts","React","memo","messageData","el","likeCount","postsBLock","PostFormRedux","addPost","posts","reduxForm","form","action","Field","component","name","placeholder","validate","MyPostsContainer","connect","Profile","compose","isAuth","auth","data","authorizedUserId","id","GetProfile","getProfileStatus","withRouter","myId","parseInt","match","params"],"mappings":"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","file":"static/js/4.a36c7c1e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__3bI51\",\"error\":\"FormControl_error__2p-ba\",\"formSummaryError\":\"FormControl_formSummaryError__2aYFp\"};","import React from 'react'\r\nimport s from './FormControl.module.css'\r\nexport const TextArea = ({input, meta, ...props}:any) => {\r\n    const TextAreaError = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + '' + (TextAreaError? s.error:'')}>\r\n            <div >\r\n                <textarea {...input}{...props} />\r\n            </div>\r\n            {TextAreaError && <span> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}\r\nexport const InputArea = ({input, meta, ...props}:any) => {\r\n    const TextAreaError = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + '' + (TextAreaError? s.error:'')}>\r\n            <input {...input} {...props}/>\r\n            {TextAreaError && <span className={s.error}> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}","\r\nexport const requiredField = (value:any) => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value:any) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n}\r\n","export default __webpack_public_path__ + \"static/media/51f6fb256629fc755b8870c801092942.22c31152.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2Y1mw\",\"contacts\":\"ProfileInfo_contacts__1ifIm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBLock\":\"MyPosts_postsBLock__2XgTU\",\"posts\":\"MyPosts_posts__2c1oP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__12Fn7\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateProfileStatus} from \"../../../redux/profile-reducer\";\r\ntype ProfileStatusPropsType = {\r\n    status: string;\r\n    updateProfileStatus: (status:string) => void;\r\n}\r\n\r\nfunction ProfileStatus(props: ProfileStatusPropsType) {\r\n    const dispatch = useDispatch()\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.status);\r\n    useEffect(() =>{\r\n         dispatch(updateProfileStatus(title))\r\n    },[props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.status);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.updateProfileStatus(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode ?\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'no status'}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={changeTitle} autoFocus={true} onBlur={activateViewMode} type=\"text\" value={title}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatus","import {useFormik} from \"formik\";\r\nimport {ProfileType, saveUserProfile} from \"../../../redux/profile-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ContactsType = {\r\n    vk: string;\r\n    github: string;\r\n    instagram: string;\r\n    facebook: string;\r\n    twitter: string;\r\n    website: string;\r\n    youtube: string;\r\n    mainLink: string;\r\n}\r\ntype PropsType = {\r\n    isOwner: boolean;\r\n    profile:ProfileType\r\n}\r\ntype FormikErrorType = {\r\n    userId: number;\r\n    aboutMe: string;\r\n    fullName: string;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription:string;\r\n    contacts: ContactsType;\r\n}\r\n\r\nconst ProfileData = (props: PropsType) => {\r\n    const dispatch = useDispatch()\r\n    const [edit, setEdit] = useState<boolean>(false)\r\n    const [lookingForAJob, setLookingForAJob] = useState<boolean>(props.profile.lookingForAJob)\r\n    const profile = useSelector<AppStateType, ProfileType>(state => state.profilePage.profile)\r\n    console.log(props.profile.aboutMe)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            userId: 16786,\r\n            aboutMe:props.profile.aboutMe,\r\n            fullName: props.profile.fullName,\r\n            lookingForAJob: lookingForAJob,\r\n            lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n            contacts: {\r\n                vk: props.profile.contacts.vk,\r\n                github: props.profile.contacts.github,\r\n                instagram: props.profile.contacts.instagram,\r\n                facebook: props.profile.contacts.facebook,\r\n                twitter: props.profile.contacts.twitter,\r\n                website: props.profile.contacts.website,\r\n                youtube: props.profile.contacts.youtube,\r\n                mainLink: props.profile.contacts.mainLink\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(saveUserProfile(values))\r\n            formik.resetForm();\r\n            setEdit(false)\r\n        },\r\n    })\r\n    return (\r\n        <div>\r\n            {props.isOwner && <button onClick={() => setEdit(!edit)}>edit</button>}\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <b>About Me:</b>\r\n                    {edit ? <input type={'aboutMe'} defaultValue={props.profile.aboutMe} {...formik.getFieldProps(`aboutMe`)}/> : props.profile.aboutMe}\r\n                    {formik.touched && formik.errors.aboutMe &&\r\n                    <div style={{color: 'red'}}>{formik.errors.aboutMe}</div>}\r\n                </div>\r\n                <div>\r\n                    <b>Full name:</b>\r\n                    {edit ? <input type={'fullName'} {...formik.getFieldProps(`fullName`)}/> : props.profile.fullName}\r\n                    {formik.touched.fullName && formik.errors.fullName &&\r\n                    <div style={{color: 'red'}}>{formik.errors.fullName}</div>}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for job:</b>\r\n                    {edit ? <input\r\n                        type={'checkbox'} onChange={e=>{setLookingForAJob(e.target.checked)}}/> :  props.profile.lookingForAJob ? 'no' : 'yes'}\r\n                    {formik.touched.lookingForAJob && formik.errors.lookingForAJob &&\r\n                    <div style={{color: 'red'}}>{formik.errors.lookingForAJob}</div>}\r\n                </div>\r\n                {lookingForAJob &&\r\n                <div>\r\n                    <b>What job you looking for:</b>\r\n                    {edit ? <input\r\n                        type={'lookingForAJobDescription'} {...formik.getFieldProps(`lookingForAJobDescription`)}/> :  props.profile.lookingForAJobDescription}\r\n                    {formik.touched.lookingForAJobDescription && formik.errors.lookingForAJobDescription &&\r\n                    <div style={{color: 'red'}}>{formik.errors.lookingForAJobDescription}</div>}\r\n                </div>\r\n                }\r\n                <b>Contacts:</b>\r\n                {Object.keys(profile.contacts).map((key, i) => {\r\n                    return <div className={s.contacts} key={i}>\r\n                        <b>{key}:</b>\r\n                        <div>\r\n                            {edit ? <input\r\n                                type={`contacts.${key}`} {...formik.getFieldProps(`contacts.${key}`)}/> :  props.profile.contacts[key as keyof ContactsType]}\r\n                        </div>\r\n                        {/*{formik.touched.contacts?.[key as keyof ContactsType] && formik.errors.contacts?.[key as keyof ContactsType] &&*/}\r\n                        {/*<div style={{color: 'red'}}>{formik.errors.contacts?.[key as keyof ContactsType]}</div>}*/}\r\n                    </div>\r\n                })}\r\n                <button type={'submit'} color={'primary'}>save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileData;","import React, {ChangeEvent} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfilePhotoType, ProfileType, saveUserPhoto} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from './ProfileStatus'\r\nimport userPhoto from './../../../Pics/51f6fb256629fc755b8870c801092942.png'\r\nimport ProfileData from \"./ProfileData\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string;\r\n    updateProfileStatus: (status: string) => void;\r\n    photos: ProfilePhotoType\r\n    saveUserPhoto: (img: File) => void\r\n    isOwner:boolean;\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoType) {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            props.saveUserPhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={props.photos.large || userPhoto} alt=\"profile pic\"/>\r\n                    {props.isOwner&&<input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                    <ProfileStatus status={props.status}\r\n                                   updateProfileStatus={props.updateProfileStatus}\r\n                    />\r\n                </div>\r\n                <ProfileData isOwner={props.isOwner} profile={props.profile}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\n\nimport s from './Post.module.css';\n\ntype PostPropsType={\n    message: string\n    like:number\n}\n\nfunction Post(props:PostPropsType) {\n    return (\n        <div >\n            <div className={s.item}>\n                <img src=\"https://lwlies.com/wp-content/uploads/2017/04/avatar-2009.jpg\" alt=\"\"/>\n                {props.message}\n                <div>\n                    <span>\n                        {props.like}\n                        <button>like</button>\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Posts from \"./Post/Post\";\nimport {ProfilePropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps} from \"redux-form\";\nimport {reduxForm} from \"redux-form\";\nimport { maxLengthCreator, requiredField} from \"../../utils/validators/validator\";\nimport {TextArea} from \"../../common/FormController/FormController\";\nlet maxLength = maxLengthCreator(99)\n\nconst MyPosts = React.memo((props: ProfilePropsType) => {\n\n    let messageData = props.message.map((el,i) => <Posts key={i} message={el.message} like={el.likeCount}/>)\n    let addPost = (value:any) => {\n        props.addPost(value.posts)\n    }\n    return (\n\n        <div className={s.postsBLock}>\n            <h3>My posts</h3>\n            <div>\n                <PostFormRedux onSubmit={addPost}/>\n            </div>\n            <div className={s.posts}>\n                {messageData}\n            </div>\n        </div>\n    );\n});\n\nconst PostForm: React.FC<InjectedFormProps<string>> = (props) => {\n    return (\n        <form action=\"\" onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={TextArea} name={'posts'} placeholder={'Enter some posts'}\n                    validate={[requiredField, maxLength]}\n                />\n            </div>\n            <div>\n                <button>add new post</button>\n            </div>\n        </form>\n    )\n}\nexport default MyPosts;\nexport const PostFormRedux = reduxForm<string>({form: 'posts'})(PostForm)","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {addPost, messageType} from \"../../../redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    message: messageType[];\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost:(posts:string) => void;\r\n}\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state:AppStateType): MapStateToPropsType => {\r\n    return{\r\n        message: state.profilePage.message,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch:Dispatch) :MapDispatchToPropsType => {\r\n    return{\r\n        addPost: (posts:string) => {\r\n            dispatch(addPost(posts))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePhotoType, ProfileType} from \"../../redux/profile-reducer\";\r\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    photos:ProfilePhotoType\r\n    saveUserPhoto:(img:File)=>void\r\n    isOwner:boolean;\r\n}\r\ntype MainProfilePropsType = ProfilePropsType & ProfileContainerPropsType\r\nfunction Profile({profile,status,updateProfileStatus,photos,saveUserPhoto,isOwner}: MainProfilePropsType) {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                updateProfileStatus={updateProfileStatus}\r\n                photos={photos}\r\n                saveUserPhoto={saveUserPhoto}\r\n                isOwner={isOwner}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React, {useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    GetProfile,\r\n    getProfileStatus,\r\n    ProfilePhotoType,\r\n    ProfileType, saveUserPhoto,\r\n    updateProfileStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {compose} from 'redux'\r\nimport {withRouter} from \"react-router\";\r\nimport {RouteComponentProps, useParams} from \"react-router-dom\";\r\n\r\ntype MapStateToPropsType = {\r\n    photos: ProfilePhotoType\r\n    profile: ProfileType | null;\r\n    status: string;\r\n    isAuth: boolean;\r\n    authorizedUserId: number | null;\r\n}\r\ntype MapStateDispatchToPropsType = {\r\n    GetProfile: (userId: number) => void;\r\n    getProfileStatus: (userId: number) => void;\r\n    updateProfileStatus: (status: string) => void;\r\n    saveUserPhoto: (img: File) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapStateDispatchToPropsType\r\nexport type PropsType = ProfileContainerPropsType & RouteComponentProps<PathParamsType>\r\n\r\nconst ProfileContainer = (props: PropsType) => {\r\n    let myId = useSelector<AppStateType, number | null>(state => state.auth.data.id)\r\n    let id = parseInt(props.match.params.userId)\r\n    useEffect(() => {\r\n        if (!id) {\r\n            if (myId != null) {\r\n                props.GetProfile(myId)\r\n            }\r\n        } else {\r\n            props.GetProfile(id)\r\n        }\r\n    }, [id, myId])\r\n    return (\r\n        <Profile {...props}\r\n                 profile={props.profile}\r\n                 GetProfile={props.GetProfile}\r\n                 status={props.status}\r\n                 getProfileStatus={props.getProfileStatus}\r\n                 updateProfileStatus={props.updateProfileStatus}\r\n                 isAuth={props.isAuth}\r\n                 authorizedUserId={props.authorizedUserId}\r\n                 photos={props.photos}\r\n                 saveUserPhoto={props.saveUserPhoto}\r\n                 isOwner={!id}\r\n        />\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        isAuth: state.auth.data.isAuth,\r\n        authorizedUserId: state.auth.data.id,\r\n        photos: state.profilePage.photos\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n        {GetProfile, getProfileStatus, updateProfileStatus, saveUserPhoto}),\r\n    withRouter) //withAuthRedirectComponent\r\n    (ProfileContainer)"],"sourceRoot":""}