{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Friends/Friends.tsx","redux/dialog-reducer.tsx","components/Dialogs/DialogItems/DialogItems.tsx","components/Dialogs/Message/Message.tsx","components/common/FormController/FormController.tsx","components/utils/validators/validator.ts","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirectComponent.tsx","components/Dialogs/DialogsContainer.tsx","api/api.ts","redux/users-reducer.ts","components/Users/Users.tsx","Pics/Iphone-spinner-2.gif","components/common/Preloader/Preloader.tsx","components/Users/users-selectors.tsx","components/Users/UsersContainer.tsx","redux/profile-reducer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.tsx","components/Header/HeaderContainer.tsx","components/Login/LoginForm.tsx","redux/app-reducer.tsx","App.tsx","redux/friends-reducer.tsx","redux/redux-store.ts","index.tsx","components/common/FormController/FormControl.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItems/DialogItems.module.css","components/Users/UsersApiComponent.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css"],"names":["module","exports","Navbar","className","s","nav","item","to","activeClassName","activeLink","itemFriends","News","props","Music","Settings","Friends","SEND_MESSAGE","initialState","users","id","name","messages","dialogReducer","state","action","type","body","dialog","DialogItems","active","img","src","alt","Message","message","chat","TextArea","input","meta","TextAreaError","touched","error","formControl","InputArea","requiredField","value","maxLengthCreator","maxLength","length","MessagesReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","Dialogs","dialogPage","usersData","map","el","messagesData","dialogs","sendMessage","mapStateToPropsForRedirect","isAuth","auth","data","withAuthRedirectComponent","Component","connect","restProps","compose","withRouter","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageCount","get","then","response","userId","console","warn","profileAPI","getProfile","post","delete","authAPI","email","password","rememberMe","getStatus","updateStatus","status","put","totalUsersCount","isFetching","isFollowing","setCurrentPage","pageNumber","setToggleFetching","setToggleFollowing","usersReducer","followed","filter","Users","pagesCount","Math","ceil","pages","i","push","selectedPage","onClick","onPageChanged","photoUrl","disabled","some","UnFollowFriend","FollowFriend","Preloader","preloader","getUsers","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getIsFollowing","UsersAPIComponent","getUser","this","React","dispatch","resultCode","follow","unfollow","items","totalCount","ADD_POST","likeCount","profile","setStatus","updateProfileStatus","profileReducer","newPost","posts","ProfileStatus","useDispatch","useState","editMode","setEditMode","title","setTitle","useEffect","log","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","ProfileInfo","descriptionBlock","fullName","photos","small","contacts","vk","github","facebook","twitter","website","instagram","lookingForAJob","lookingForAJobDescription","Post","like","MyPosts","messageData","postsBLock","PostFormRedux","addPost","MyPostsContainer","profilePage","Profile","ProfileContainer","match","params","authorizedUserId","GetProfile","getProfileStatus","Header","header","loginBlock","login","AuthLogOut","setAuthUserData","FollowOrUnfollow","authReducer","HeaderContainer","LoginReduxForm","formSummaryError","AuthLogin","stopSubmit","_error","formData","isInitialized","appReducer","App","isLogged","useSelector","appPage","res","catch","finally","path","render","DialogsContainer","UsersContainer","style","position","top","textAlign","width","CircularProgress","friends","friendsReducer","rootReducer","combineReducers","sideBarPage","formReducer","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0a4c757b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2Y1mw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__12Fn7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2LvmE\",\"item\":\"Navbar_item__3Z4YA\",\"activeLink\":\"Navbar_activeLink__E3EjW\",\"itemFriends\":\"Navbar_itemFriends__ukrFy\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Navbar.module.css';\n\ntype NavbarType = {\n\n}\nconst Navbar = () => {\n    return (\n        <nav className={s.nav}>\n            <div className={`${s.item}`}>\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Messages</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\n            </div>\n            <div className={s.itemFriends}>\n                <NavLink to='/friends' activeClassName={s.activeLink}>Friends</NavLink>\n            </div>\n            <span className={s.itemFriends}>\n                <NavLink to='/Abay' activeClassName={s.activeLink}> Aboy </NavLink>\n            </span>\n\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react'\r\nimport s from './News.module.css'\r\nfunction News(props:any){\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\nexport default News","import React from 'react'\r\nfunction Music(props:any){\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\nexport default Music","import React from 'react'\r\nimport s from './Settings.module.css'\r\nfunction Settings(props:any){\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\nexport default Settings","import React from 'react'\r\nfunction Friends(){\r\n    return (\r\n        <div>\r\n            Friends\r\n        </div>\r\n    )\r\n}\r\nexport default Friends","type ActionsTypesF = ReturnType<typeof sendMessage>\r\n\r\nexport const SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\nexport type messagesType = {\r\n    id: number;\r\n    messages: string;\r\n}\r\nexport type userType = {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\n\r\nexport type InitialStateType = {\r\n    users: userType[]\r\n    messages: messagesType[]\r\n}\r\nlet initialState: InitialStateType = {\r\n    users: [\r\n        {id: '1', name: 'Damir'},\r\n        {id: '2', name: 'Abay'},\r\n        {id: '3', name: 'Kyama'},\r\n        {id: '4', name: 'Kaidar'},\r\n        {id: '5', name: 'Aday'},\r\n\r\n    ] as userType[],\r\n    messages: [\r\n        {id: 1, messages: 'Hi'},\r\n        {id: 2, messages: 'What\\'s up?'},\r\n        {id: 3, messages: 'How\\'s it going?'},\r\n\r\n    ] as messagesType[]\r\n}\r\n\r\nexport const dialogReducer = (state: InitialStateType = initialState, action: ActionsTypesF):InitialStateType => {\r\n    switch (action.type){\r\n        case SEND_MESSAGE:\r\n            let body = action.dialog\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id:6, messages: body} ]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const sendMessage = (dialog:string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        dialog\r\n    } as const\r\n\r\n}\r\n\r\nexport default dialogReducer","import React from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from \"./DialogItems.module.css\";\r\n\r\ntype DialogItemsTypes = {\r\n    name:string\r\n    id:string\r\n}\r\n\r\nfunction DialogItems(props:DialogItemsTypes) {\r\n\r\n    return (\r\n        <div>\r\n            <div className={`${s.active}`}>\r\n                <img className={s.img} src=\"https://media.vanityfair.com/photos/5c5325d3cec32271820c6fc1/master/w_1600%2Cc_limit/ava-max-interview.jpg\" alt=\"\"/>\r\n                <NavLink to={'/dialogs/'+props.id}>{props.name}</NavLink>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItems","import React from 'react'\r\nimport s from \"./Message.module.css\";\r\n\r\ntype setMessageType = {\r\n    messages: string;\r\n    id: number;\r\n}\r\n\r\nfunction Message(props: setMessageType) {\r\n    return (\r\n        <div>\r\n            <div className={s.message}>\r\n                <div className={s.chat}>\r\n                    {props.messages}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from 'react'\r\nimport s from './FormControl.module.css'\r\nexport const TextArea = ({input, meta, ...props}:any) => {\r\n    const TextAreaError = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + '' + (TextAreaError? s.error:'')}>\r\n            <div >\r\n                <textarea {...input}{...props} />\r\n            </div>\r\n            {TextAreaError && <span> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}\r\nexport const InputArea = ({input, meta, ...props}:any) => {\r\n    const TextAreaError = meta.touched && meta.error\r\n    return(\r\n        <div className={s.formControl + '' + (TextAreaError? s.error:'')}>\r\n            <input {...input} {...props}/>\r\n            {TextAreaError && <span className={s.error}> {meta.error} </span>}\r\n        </div>\r\n    )\r\n}","\r\nexport const requiredField = (value:any) => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value:any) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n}\r\n","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItems from \"./DialogItems/DialogItems\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormController/FormController\";\r\nimport {maxLengthCreator, requiredField} from \"../utils/validators/validator\";\r\n\r\nlet maxLength = maxLengthCreator(10)\r\nfunction Dialogs(props: DialogsPropsType) {\r\n    let state = props.dialogPage\r\n\r\n    let usersData = state.users.map(el => <DialogItems\r\n        key={el.id}\r\n        name={el.name}\r\n        id={el.id}\r\n    />)\r\n    let messagesData = state.messages.map(el => <Message\r\n        key={el.id}\r\n        messages={el.messages}\r\n        id={el.id}\r\n    />)\r\n    let onNewMessageClick = (value:any) => {\r\n        props.sendMessage(value.dialog)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div>\r\n\r\n                {usersData}\r\n\r\n            </div>\r\n            <div className={s.messages}>\r\n\r\n                <div> {messagesData}</div>\r\n                <div>\r\n                    <MessagesReduxForm onSubmit={onNewMessageClick}/>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst DialogMessageForm:React.FC<InjectedFormProps<string>> = (props) => {\r\n\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} name={'dialog'} type={'text'} placeholder={'Enter your message'}\r\n                       validate={[requiredField, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button > Send </button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport const MessagesReduxForm = reduxForm<string>({form: 'dialog'})(DialogMessageForm)\r\nexport default Dialogs","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsType2 = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state:AppStateType) :MapStateToPropsType2 =>{\r\n    return {\r\n        isAuth: state.auth.data.isAuth\r\n    }\r\n}\r\nexport function withAuthRedirectComponent <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props:MapStateToPropsType2) => {\r\n        let {isAuth, ...restProps} = props\r\n        if(!isAuth) return <Redirect to='login'/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    InitialStateType, sendMessage\r\n} from \"../../redux/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {compose} from 'redux'\r\nimport {withAuthRedirectComponent} from \"../../hoc/WithAuthRedirectComponent\";\r\nimport {withRouter} from \"react-router\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogPage: InitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (dialog:string) => void;\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\nlet mapStateToProps = (state:AppStateType) : MapStateToPropsType => ({\r\n    dialogPage:state.dialogPage\r\n})\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n        {sendMessage}),\r\n    withRouter,withAuthRedirectComponent)(Dialogs)","import axios from \"axios\";\r\nimport {ProfileType} from \"../redux/profile-reducer\";\r\nimport {UsersType} from \"../redux/users-reducer\";\r\nimport {setUserDataType} from \"../redux/auth-reducer\";\r\n\r\ntype CommonResponseType<T> = {\r\n    data:T;\r\n    resultCode:number;\r\n    messages:string[];\r\n    fieldsErrors:string[];\r\n\r\n}\r\n\r\nexport type GetUsersType = {\r\n    error: string;\r\n    totalCount: number;\r\n    items: UsersType[]\r\n}\r\n\r\ntype GetAuthType = {\r\n    data:setUserDataType\r\n    resultCode: number;\r\n    messages: string[];\r\n    fieldsErrors: string[];\r\n}\r\ntype PostAuthType = {\r\n    email: string;\r\n    password:string;\r\n    rememberMe: boolean;\r\n    captcha:boolean;\r\n}\r\ntype PostAuthLoginType = {\r\n    resultCode: string;\r\n    messages: string[];\r\n    fieldsError: string[];\r\n    data: PostAuthType\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials:true,\r\n    headers:{\r\n        'API-KEY': '1eaa5d66-d310-487c-a1d0-2fd59af6c2de'\r\n    }\r\n})\r\nexport const usersAPI = {\r\n    getUsers (currentPage:number,pageCount:number) {\r\n        return  instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageCount}`).then(response=> {\r\n            return response.data\r\n        })\r\n    },\r\n    getProfile (userId:number)  {\r\n        console.warn('Obsolete method. Please use profileApi object.')\r\n        return profileAPI.getProfile(userId)\r\n   },\r\n\r\n    FollowFriends(id:number){\r\n        return instance.post<CommonResponseType<{}>>(`follow/${id}`).then(response=>response.data)\r\n    },\r\n    UnFollowFriends(id:number){\r\n        return instance.delete<CommonResponseType<{}>>(`follow/${id}`).then(response=>response.data)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    getAuthMe (){\r\n        return instance.get<GetAuthType>(`auth/me`).then(response=>response.data)\r\n    },\r\n    getLogin(email:string, password:string,rememberMe:boolean){\r\n        return instance.post<CommonResponseType<{ data: PostAuthLoginType }>>('auth/login', {email, password, rememberMe});\r\n    },\r\n    getLogOut(){\r\n        return instance.delete<CommonResponseType<{}>>('auth/login')\r\n    },\r\n    // getCaptcha(url:string){\r\n    //     return instance.get('security/get-captcha-url')\r\n    // }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile (userId:number)  {\r\n        return  instance.get<ProfileType>(`profile/`+ userId)\r\n    },\r\n    getStatus (userId:number) {\r\n        return instance.get<any>('profile/status/'+userId)\r\n    },\r\n    updateStatus (status:string) {\r\n        return instance.put<CommonResponseType<{data:string}>>('profile/status',{status})\r\n    }\r\n}","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ActionsTypesF =\r\n    ReturnType<typeof follow>|\r\n    ReturnType<typeof unfollow>|\r\n    ReturnType<typeof setUser>|\r\n    ReturnType<typeof setCurrentPage>|\r\n    ReturnType<typeof setTotalUsersCount>|\r\n    ReturnType<typeof setToggleFetching>|\r\n    ReturnType<typeof setToggleFollowing>\r\n\r\nexport type UsersPhotoType = {\r\n    small: string;\r\n    large: string;\r\n}\r\n\r\nexport type UsersType = {\r\n    id:number;\r\n    photoUrl:string\r\n    name:string;\r\n    status:string\r\n    followed:boolean\r\n    photos:UsersPhotoType;\r\n}\r\nexport type InitialStateType = {\r\n    users: UsersType[]\r\n    pageCount:number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFollowing: number[]\r\n}\r\nexport type followAT = {\r\n    type:'FOLLOW'\r\n    userId:number\r\n}\r\nexport type unfollowAT = {\r\n    type:'UNFOLLOW'\r\n    userId:number\r\n}\r\nexport type setUserAT = {\r\n    type:'SET-USERS'\r\n    users:UsersType[]\r\n}\r\nexport type setPageAT = {\r\n    type: 'SET-PAGE'\r\n    pageNumber: number\r\n}\r\nexport type setTotalUsersCountAT = {\r\n    type: 'SET-TOTAL-USERS'\r\n    totalUsersCount:number\r\n}\r\nexport type setToggleFetching = {\r\n    type: 'SET-TOGGLE-FETCHING'\r\n    isFetching: boolean\r\n}\r\nexport type setToggleFollowing = {\r\n    type: 'SET-TOGGLE-FOLLOWING'\r\n    id:number\r\n    isFetching: boolean;\r\n}\r\nlet initialState : InitialStateType = {\r\n    users: [] as UsersType[],\r\n    pageCount: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowing: []\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsTypesF): InitialStateType => {\r\n    switch (action.type){\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(el => el.id === action.userId ? {...el, followed:true}:el)}\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(el => el.id === action.userId ? {...el, followed:false}:el)\r\n            }\r\n        case \"SET-USERS\":\r\n            return {\r\n                ...state, users:action.users\r\n            }\r\n        case 'SET-PAGE':\r\n            return {\r\n                ...state, currentPage:action.pageNumber\r\n            }\r\n        case \"SET-TOTAL-USERS\":\r\n            return {\r\n                ...state, totalUsersCount: action.totalUsersCount\r\n            }\r\n        case \"SET-TOGGLE-FETCHING\":\r\n            return {\r\n                ...state, isFetching:action.isFetching\r\n            }\r\n        case \"SET-TOGGLE-FOLLOWING\":\r\n            return {\r\n                ...state,\r\n                isFollowing: action.isFetching?[...state.isFollowing, action.id]:\r\n                    state.isFollowing.filter(el=> el!=action.id)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const follow = (userId:number):followAT => {\r\n    return {\r\n        type:'FOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport const unfollow = (userId:number):unfollowAT => {\r\n    return {\r\n        type:'UNFOLLOW',\r\n        userId\r\n    } as const\r\n}\r\nexport const setUser = (users:UsersType[]):setUserAT => {\r\n    return{\r\n        type:'SET-USERS',\r\n        users\r\n    } as const\r\n}\r\nexport const setCurrentPage = (pageNumber:number):setPageAT =>{\r\n    return {\r\n        type:'SET-PAGE',\r\n        pageNumber\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount:number):setTotalUsersCountAT =>{\r\n    return {\r\n        type:'SET-TOTAL-USERS',\r\n        totalUsersCount\r\n    } as const\r\n}\r\nexport const setToggleFetching = (isFetching: boolean):setToggleFetching => {\r\n    return {\r\n        type: \"SET-TOGGLE-FETCHING\",\r\n        isFetching\r\n    }as const\r\n}\r\nexport const setToggleFollowing = (isFetching:boolean, id:number): setToggleFollowing => {\r\n    return{\r\n        type: 'SET-TOGGLE-FOLLOWING',\r\n        id,\r\n        isFetching\r\n    } as const\r\n}\r\n\r\nexport const getUser = (currentPage:number, pageCount:number) => {\r\n    return (dispatch:Dispatch) => {\r\n        dispatch(setToggleFetching(true));\r\n        dispatch(setCurrentPage(currentPage))\r\n        usersAPI.getUsers(currentPage,pageCount).then(response => {\r\n            dispatch(setToggleFetching(false))\r\n            dispatch(setUser(response.items))\r\n            dispatch(setTotalUsersCount(response.totalCount))\r\n        })\r\n    }\r\n}\r\n\r\nexport const FollowFriend = (userId:number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setToggleFollowing(true,userId))\r\n        usersAPI.FollowFriends(userId).then(response => {\r\n            if (response.resultCode == 0) {\r\n               dispatch( follow(userId))\r\n            }\r\n            dispatch(setToggleFollowing(false, userId))\r\n        })\r\n    }\r\n}\r\nexport const UnFollowFriend = (userId:number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setToggleFollowing(true,userId))\r\n        usersAPI.UnFollowFriends(userId).then(response => {\r\n            if (response.resultCode === 0) {\r\n                dispatch(unfollow(userId))\r\n            }\r\n            dispatch(setToggleFollowing(false, userId))\r\n        })\r\n    }\r\n}\r\nexport default usersReducer","import React from 'react'\r\nimport s from \"./UsersApiComponent.module.css\";\r\nimport {UsersPropsType} from \"./UsersContainer\";\r\n\r\ntype onPageChangedType = {\r\n    onPageChanged: (page: number) => void\r\n}\r\nexport type UsersPresentPropsType = UsersPropsType & onPageChangedType\r\nlet Users = (props: UsersPresentPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageCount)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(el => {\r\n                return <span className={props.currentPage === el ? s.selectedPage : ''}\r\n                             onClick={() => props.onPageChanged(el)}>{el}</span>\r\n            })}\r\n\r\n        </div>\r\n        {\r\n            props.users.map(el => <div key={el.id}>\r\n                    <span>\r\n                        <div>\r\n\r\n                            <img className={s.img}\r\n                                 src={el.photoUrl != null ? el.photoUrl : 'https://i.pinimg.com/originals/51/f6/fb/51f6fb256629fc755b8870c801092942.png'}\r\n                                 alt=\"\"/>\r\n\r\n                        </div>\r\n                        <div>\r\n\r\n                            {el.followed ?\r\n                                <button disabled={props.isFollowing.some(id=> id==el.id)} onClick={() => {\r\n                                    props.UnFollowFriend(el.id )\r\n                                }}>unfollow</button>\r\n                                : <button disabled={props.isFollowing.some(id=> id==el.id)} onClick={() => {\r\n                                    props.FollowFriend(el.id)\r\n                                }}>follow</button>\r\n                            }\r\n                        </div>\r\n                    </span>\r\n                <span>\r\n                            <span>\r\n                                <div>{el.name}</div>\r\n                                <div>{el.status}</div>\r\n                            </span>\r\n                    </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\nexport default Users","export default __webpack_public_path__ + \"static/media/Iphone-spinner-2.d3fbaf2b.gif\";","import React from \"react\";\r\n\r\nimport preloader from './../../../Pics/Iphone-spinner-2.gif'\r\n\r\n\r\nconst Preloader = () =>{\r\n    return <div>\r\n        <img src={preloader} alt=\"\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","import {createSelector} from \"reselect\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nexport const getUsersSelector = (state:AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users:UsersType[]) => {\r\n    return users.filter(el=>true)\r\n})\r\nexport const getPageSize = (state:AppStateType) => {\r\n    return state.usersPage.pageCount\r\n}\r\nexport const getTotalUsersCount = (state:AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state:AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state:AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getIsFollowing = (state:AppStateType) => {\r\n    return state.usersPage.isFollowing\r\n}\r\n","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    UsersType,\r\n    setCurrentPage,\r\n    setToggleFollowing, getUser, FollowFriend, UnFollowFriend\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from \"react-router\";\r\nimport {withAuthRedirectComponent} from \"../../hoc/WithAuthRedirectComponent\";\r\nimport {\r\n    getCurrentPage,\r\n    getIsFetching,\r\n    getIsFollowing,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"./users-selectors\";\r\n\r\nexport type MapStateToPropsType = {\r\n    users: UsersType[];\r\n    pageCount: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    isFollowing: number[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUser: (currentPage: number, pageCount: number) => void\r\n    FollowFriend: (id: number) => void;\r\n    UnFollowFriend: (id: number) => void;\r\n}\r\n\r\nexport type UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass UsersAPIComponent extends React.Component<UsersPropsType, UsersPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUser(this.props.currentPage, this.props.pageCount)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUser(pageNumber, this.props.pageCount)\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users currentPage={this.props.currentPage}\r\n                   pageCount={this.props.pageCount}\r\n                   totalUsersCount={this.props.totalUsersCount}\r\n                   users={this.props.users}\r\n                   onPageChanged={this.onPageChanged}\r\n                   isFetching={this.props.isFetching}\r\n                   isFollowing={this.props.isFollowing}\r\n                   FollowFriend={this.props.FollowFriend}\r\n                   UnFollowFriend={this.props.UnFollowFriend}\r\n                   getUser={this.props.getUser}/>\r\n        </div>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        users:getUsers(state),\r\n        pageCount: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        isFollowing: getIsFollowing(state)\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        FollowFriend,\r\n        UnFollowFriend,\r\n        setCurrentPage,\r\n        setToggleFollowing,\r\n        getUser\r\n    }),\r\n    withRouter, withAuthRedirectComponent)\r\n(UsersAPIComponent)\r\n// const UsersContainer = connect(mapStateToProps, {\r\n//     FollowFriend,\r\n//     UnFollowFriend,\r\n//     setCurrentPage,\r\n//     setToggleFollowing,\r\n//     getUser\r\n// })(UsersAPIComponent);\r\n//\r\n// export default UsersContainer","import {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\ntype ActionsTypesF =\r\n    ReturnType<typeof addPost> |\r\n    ReturnType<typeof setProfile>|\r\n    ReturnType<typeof setStatus>\r\n\r\nexport const ADD_POST = 'ADD-POST'\r\n\r\nexport type messageType = {\r\n    message: string;\r\n    likeCount: number;\r\n    id: number;\r\n}\r\n\r\ntype ProfilePhotoType = {\r\n    small:string\r\n    large:string\r\n}\r\ntype addPostType = {\r\n    type: 'ADD-POST'\r\n    posts:string\r\n}\r\ntype setProfile = {\r\n    type: 'SET-PROFILE'\r\n    profile:ProfileType\r\n}\r\ntype setStatus = {\r\n    type: 'SET-STATUS'\r\n    status: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number;\r\n    lookingForAJob: boolean;\r\n    lookingForAJobDescription: string;\r\n    fullName: string;\r\n    contacts: {\r\n        github:string;\r\n        vk: string;\r\n        facebook: string;\r\n        instagram: string;\r\n        twitter: string;\r\n        website:string;\r\n        youtube: string;\r\n        mainLink: string;\r\n    }\r\n    photos:ProfilePhotoType\r\n}\r\n\r\nexport type InitialStateType = {\r\n    message: messageType[];\r\n    profile: ProfileType | null;\r\n    status:string;\r\n}\r\n\r\nlet initialState : InitialStateType = {\r\n    message: [\r\n        {id: 1, message: 'Hi, how are you?', likeCount: 22},\r\n        {id: 2, message: 'It is my first post', likeCount: 11},\r\n\r\n    ]as messageType[] ,\r\n    profile: null,\r\n    status:''\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsTypesF): InitialStateType => {\r\n    switch (action.type){\r\n        case ADD_POST:{\r\n            const newPost: messageType = {\r\n                id: 3,\r\n                message: action.posts,\r\n                likeCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                message: [...state.message, newPost],\r\n            };\r\n        }\r\n        case \"SET-PROFILE\":\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        case \"SET-STATUS\":\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const addPost = (posts:string):addPostType => {\r\n    return {\r\n        type: ADD_POST,\r\n        posts\r\n    } as const\r\n}\r\nexport const setProfile = (profile:ProfileType):setProfile => {\r\n    return {\r\n        type: 'SET-PROFILE',\r\n        profile\r\n    } as const\r\n}\r\nexport const setStatus = (status:string):setStatus => {\r\n    return{\r\n        type: 'SET-STATUS',\r\n        status\r\n    } as const\r\n}\r\nexport const GetProfile=(userId:number)=>{\r\n    return (dispatch:Dispatch) =>{\r\n        usersAPI.getProfile(userId).then(response=>{\r\n           dispatch(setProfile(response.data))\r\n        })\r\n    }\r\n}\r\nexport const getProfileStatus = (userId:number) => {\r\n    return (dispatch:Dispatch) => {\r\n        profileAPI.getStatus(userId).then(response => {\r\n            dispatch(setStatus(response.data))\r\n        })\r\n    }\r\n}\r\nexport const updateProfileStatus = (status:string) => {\r\n    return (dispatch:Dispatch) => {\r\n        profileAPI.updateStatus(status).then(response => {\r\n            if(response.data.resultCode===0){\r\n                dispatch(setStatus(status))\r\n            }\r\n\r\n        })\r\n    }\r\n}\r\nexport default profileReducer","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateProfileStatus} from \"../../../redux/profile-reducer\";\r\ntype ProfileStatusPropsType = {\r\n    status: string;\r\n    updateProfileStatus: (status:string) => void;\r\n}\r\n\r\nfunction ProfileStatus(props: ProfileStatusPropsType) {\r\n    const dispatch = useDispatch()\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.status);\r\n    useEffect(() =>{\r\n        console.log('qwe')\r\n         dispatch(updateProfileStatus(title))\r\n    },[props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.status);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.updateProfileStatus(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            {!editMode ?\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || 'no status'}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input onChange={changeTitle} autoFocus={true} onBlur={activateViewMode} type=\"text\" value={title}/>\r\n                </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatus","import React from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from './ProfileStatus'\r\ntype ProfileInfoType = {\r\n    profile:ProfileType\r\n    status: string;\r\n    updateProfileStatus: (status:string) => void;\r\n}\r\n\r\nfunction ProfileInfo(props:ProfileInfoType){\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            {/*<div>*/}\r\n            {/*    <img src={props.pic}/>*/}\r\n            {/*</div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <p>\r\n                    {props.profile.fullName}\r\n                </p>\r\n                <div>\r\n                    <img src={props.profile.photos.small} alt=\"\"/>\r\n                    <ProfileStatus status={props.status} updateProfileStatus={props.updateProfileStatus} />\r\n                </div>\r\n\r\n                <span> Я будущий спец в IT-INDUSTRY</span>\r\n                <div>\r\n                    <div>{props.profile.contacts.vk} </div>\r\n                    <div>{props.profile.contacts.github} </div>\r\n                    <div>{props.profile.contacts.facebook}</div>\r\n                    <div>{props.profile.contacts.twitter} </div>\r\n                    <div>{props.profile.contacts.website} </div>\r\n                    <div>{props.profile.contacts.instagram} </div>\r\n                </div>\r\n                <div>\r\n                    {props.profile.lookingForAJob}\r\n                </div>\r\n                <div>\r\n                    {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo","import React from 'react';\n\nimport s from './Post.module.css';\n\ntype PostPropsType={\n    message: string\n    like:number\n}\n\nfunction Post(props:PostPropsType) {\n    return (\n        <div >\n            <div className={s.item}>\n                <img src=\"https://lwlies.com/wp-content/uploads/2017/04/avatar-2009.jpg\" alt=\"\"/>\n                {props.message}\n                <div>\n                    <span>\n                        {props.like}\n                        <button>like</button>\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Posts from \"./Post/Post\";\nimport {ProfilePropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps} from \"redux-form\";\nimport {reduxForm} from \"redux-form\";\nimport { maxLengthCreator, requiredField} from \"../../utils/validators/validator\";\nimport {TextArea} from \"../../common/FormController/FormController\";\nlet maxLength = maxLengthCreator(99)\n\nfunction MyPosts(props: ProfilePropsType) {\n\n    let messageData = props.message.map(el => <Posts message={el.message} like={el.likeCount}/>)\n    let addPost = (value:any) => {\n        props.addPost(value.posts)\n    }\n    return (\n        <div className={s.postsBLock}>\n            <h3>My posts</h3>\n            <div>\n                <PostFormRedux onSubmit={addPost}/>\n            </div>\n            <div className={s.posts}>\n                {messageData}\n            </div>\n        </div>\n    );\n}\n\nconst PostForm: React.FC<InjectedFormProps<string>> = (props) => {\n    return (\n        <form action=\"\" onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={TextArea} name={'posts'} placeholder={'Enter some posts'}\n                    validate={[requiredField, maxLength]}\n                />\n            </div>\n            <div>\n                <button>add new post</button>\n            </div>\n        </form>\n    )\n}\nexport default MyPosts;\nexport const PostFormRedux = reduxForm<string>({form: 'posts'})(PostForm)","import React from 'react';\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {addPost, messageType} from \"../../../redux/profile-reducer\";\nimport {Dispatch} from \"redux\";\n\ntype MapStateToPropsType = {\n    message: messageType[];\n}\n\ntype MapDispatchToPropsType = {\n    addPost:(posts:string) => void;\n}\n\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state:AppStateType): MapStateToPropsType => {\n    return{\n        message: state.profilePage.message,\n    }\n}\nconst mapDispatchToProps = (dispatch:Dispatch) :MapDispatchToPropsType => {\n    return{\n        addPost: (posts:string) => {\n            dispatch(addPost(posts))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer;\n","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/profile-reducer\";\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\n\ntype ProfilePropsType = {\n    profile: ProfileType\n    status: string\n    updateProfileStatus:(status:string) => void;\n}\ntype MainProfilePropsType = ProfilePropsType & ProfileContainerPropsType\n\nfunction Profile(props: MainProfilePropsType) {\n    return (\n        <div>\n            <ProfileInfo\n                profile={props.profile}\n                // pic={'https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'}\n                status={props.status}\n                updateProfileStatus={props.updateProfileStatus}\n            />\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\nexport default Profile;\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {GetProfile, getProfileStatus, ProfileType, updateProfileStatus} from \"../../redux/profile-reducer\";\r\nimport {compose} from 'redux'\r\nimport {withRouter} from \"react-router\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null;\r\n    status: string;\r\n    isAuth:boolean;\r\n    authorizedUserId:number | null;\r\n}\r\ntype MapStateDispatchToPropsType = {\r\n    GetProfile: (userId: number) => void;\r\n    getProfileStatus: (userId: number) => void;\r\n    updateProfileStatus: (status: string) => void;\r\n}\r\nexport type ProfileContainerPropsType = MapStateToPropsType & MapStateDispatchToPropsType\r\n\r\nclass ProfileContainer extends React.Component <any, any> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n        this.props.GetProfile(userId)\r\n        this.props.getProfileStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     GetProfile={this.props.GetProfile}\r\n                     status={this.props.status}\r\n                     getProfileStatus={this.props.getProfileStatus}\r\n                     updateProfileStatus={this.props.updateProfileStatus}\r\n                     isAuth={this.props.isAuth}\r\n                     authorizedUserId={this.props.authorizedUserId}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        isAuth:state.auth.data.isAuth,\r\n        authorizedUserId: state.auth.data.id\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n    {GetProfile, getProfileStatus, updateProfileStatus}),\r\n    withRouter) //withAuthRedirectComponent\r\n    (ProfileContainer)","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Header.module.css';\nimport {HeaderContainerTypeProps} from \"./HeaderContainer\";\n\nfunction Header(props:HeaderContainerTypeProps) {\n  return (\n    <header className={s.header}>\n      <img src=\"https://www.freelogodesign.org/Content/img/logo-ex-7.png\" alt=\"\"/>\n        <div className={s.loginBlock}>\n            {props.isAuth ?\n                <div>{props.login} - <button onClick={props.AuthLogOut}> Log out</button></div>\n          : <NavLink to={'/login'}>Login</NavLink>}\n        </div>\n    </header>\n  );\n}\nexport default Header;\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\ntype ActionsTypesF =\r\n    ReturnType<typeof setAuthUserData>|\r\n    ReturnType<typeof setToggleFetching>\r\n\r\nexport type setUserDataType = {\r\n        id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth:boolean;\r\n}\r\nexport type setToggleFetching = {\r\n    type: 'SET-TOGGLE-FETCHING'\r\n    isFetching:boolean\r\n}\r\nexport type setUserDataTypeAT = {\r\n    type: 'SET-USER-DATA'\r\n    data: setUserDataType\r\n}\r\n\r\nexport type InitialStateType = {\r\n    data: setUserDataType\r\n    isFetching: boolean;\r\n    resultCode: number;\r\n    messages: string[];\r\n}\r\nlet initialState: InitialStateType = {\r\n    data:{\r\n        id:null,\r\n        email:null,\r\n        login: null,\r\n        isAuth:false\r\n    },\r\n    isFetching: false,\r\n    resultCode: 0,\r\n    messages: ['']\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsTypesF): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            }\r\n        case \"SET-TOGGLE-FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setAuthUserData = ( id: number|null, email: string|null, login: string|null, isAuth:boolean) : setUserDataTypeAT  => {\r\n    return {\r\n        type: 'SET-USER-DATA',\r\n        data:{id, email, login,isAuth}\r\n    } as const\r\n}\r\nexport const setToggleFetching = (isFetching: boolean):setToggleFetching => {\r\n    return {\r\n        type: \"SET-TOGGLE-FETCHING\",\r\n        isFetching\r\n    }as const\r\n}\r\n\r\nexport const FollowOrUnfollow = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.getAuthMe().then(response=> {\r\n            dispatch(setToggleFetching(false))\r\n            if(response.resultCode===0){\r\n                let {id,login,email} = response.data\r\n                dispatch(setAuthUserData(id,login,email, true))\r\n                dispatch(setToggleFetching(true))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const AuthLogin = (email:string, password:string, rememberMe:boolean) => {\r\n    return (dispatch:any) => {\r\n        authAPI.getLogin(email, password, rememberMe).then(response => {\r\n            if(response.data.resultCode===0) {\r\n                dispatch(FollowOrUnfollow())\r\n            }else{\r\n                let message = response.data.messages.length > 0 ?response.data.messages[0]: 'Some error'\r\n                dispatch(stopSubmit('login',\r\n                    {_error:message}))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport const AuthLogOut = () => {\r\n    return (dispatch:Dispatch) => {\r\n        authAPI.getLogOut().then(response => {\r\n            if(response.data.resultCode===0) {\r\n                dispatch(setAuthUserData(null,null,null, false))\r\n            }\r\n        })\r\n    }\r\n}\r\n// export const Captcha = (url:string) => {\r\n//     return (dispatch:Dispatch) => {\r\n//         authAPI.getCaptcha(url).then(response => {\r\n//             response.data.getCaptcha('')\r\n//         })\r\n//     }\r\n// }\r\n\r\n\r\nexport default authReducer","import React from 'react'\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    AuthLogOut,\r\n    FollowOrUnfollow,\r\n    setAuthUserData,\r\n    setToggleFetching,\r\n    setUserDataType\r\n} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype mapDispatchToProps = {\r\n    setAuthUserData: (data: setUserDataType) => void;\r\n    setToggleFetching: (isFetching: boolean) => void;\r\n    FollowOrUnfollow:() => void;\r\n    AuthLogOut:() => number;\r\n}\r\nexport type HeaderContainerTypeProps = mapStateToPropsType & mapDispatchToProps\r\nclass HeaderContainer extends React.Component<any, any>{\r\n    componentDidMount() {\r\n        this.props.FollowOrUnfollow()\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}\r\n                       login={this.props.login}\r\n                       isAuth={this.props.isAuth}\r\n                       setAuthUserData={this.props.setAuthUserData}\r\n                       setToggleFetching={this.props.setToggleFetching}\r\n                       FollowOrUnfollow={this.props.FollowOrUnfollow}\r\n                       AuthLogOut={this.props.AuthLogOut}\r\n        />\r\n    }\r\n}\r\nlet mapStateToProps = (state:AppStateType): mapStateToPropsType => {\r\n    return{\r\n        isAuth: state.auth.data.isAuth,\r\n        login: state.auth.data.login,\r\n    }\r\n}\r\nexport default connect(mapStateToProps,{setAuthUserData,setToggleFetching,FollowOrUnfollow,AuthLogOut}) (HeaderContainer)","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {InputArea} from \"../common/FormController/FormController\";\r\nimport {maxLengthCreator, requiredField} from \"../utils/validators/validator\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {AuthLogin, AuthLogOut} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport s from './../common/FormController/FormControl.module.css'\r\ntype MapStateToPropsType2 = {\r\n    isAuth: boolean\r\n}\r\nexport type FormDataType = {\r\n    login: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n}\r\ntype LoginType = {\r\n    AuthLogin:(email:string, password:string, rememberMe:boolean)=> void;\r\n    isAuth: boolean\r\n}\r\nlet maxLength = maxLengthCreator(30)\r\n\r\nconst LoginForm : React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form action=\"\" onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={InputArea} name={'login'} type=\"text\" placeholder={'login'}\r\n                    validate={[requiredField,maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={InputArea} name={'password'} type=\"password\" placeholder={'password'}\r\n                       validate={[requiredField,maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={'input'} name={'rememberMe'} type=\"checkbox\" placeholder={'rememberMe'}/>\r\n            </div>\r\n            <div>\r\n                {props.error?<div className={s.formSummaryError}>\r\n                    {props.error}\r\n                </div>:''}\r\n                <button>\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\nlet mapStateToPropsForRedirect = (state:AppStateType) :MapStateToPropsType2 =>{\r\n    return {\r\n        isAuth: state.auth.data.isAuth\r\n    }\r\n}\r\nconst Login = (props:LoginType) => {\r\n    const onSubmit = (formData:FormDataType) => {\r\n        props.AuthLogin(formData.login,formData.password, formData.rememberMe )\r\n    }\r\n    if(props.isAuth){\r\n        return <Redirect to={'profile'}/>\r\n    }else{\r\n\r\n    }\r\n    return(\r\n        <div>\r\n            <h1> Login </h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToPropsForRedirect,{AuthLogin, AuthLogOut}) (Login)","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {setAuthUserData} from \"./auth-reducer\";\r\n\r\ntype initialStateType = {\r\n    isInitialized: boolean\r\n}\r\ntype ActionType = ReturnType<typeof isInitializedAc>\r\nconst initialState: initialStateType = {\r\n    isInitialized: false\r\n}\r\nexport const appReducer = (state: initialStateType = initialState, action: ActionType): initialStateType => {\r\n    switch (action.type) {\r\n        case'IS-INITIALIZED':{\r\n            return {...state, isInitialized:action.isInitialized}\r\n        }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const isInitializedAc = (isInitialized: boolean) => ({type: 'IS-INITIALIZED', isInitialized} as const)\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\r\n    authAPI.getAuthMe().then((res) => {\r\n        if (res.resultCode === 0) {\r\n            let {id,login,email} = res.data\r\n            dispatch(setAuthUserData(id,login,email, true))\r\n        } else {\r\n        }\r\n    })\r\n        .catch(()=>{\r\n\r\n        })\r\n        .finally(()=>{\r\n            dispatch(isInitializedAc(true))\r\n        })\r\n}\r\nexport default appReducer;","import React, {useEffect} from 'react';\nimport Navbar from './components/Navbar/Navbar'\nimport './App.css';\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport Friends from \"./components/Friends/Friends\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginForm from \"./components/Login/LoginForm\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./redux/redux-store\";\nimport {initializeAppTC} from \"./redux/app-reducer\";\nimport {CircularProgress} from \"@material-ui/core\";\n\n\nfunction App() {\n    const dispatch = useDispatch()\n    const isLogged = useSelector<AppStateType, boolean>(state => state.appPage.isInitialized)\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    },[])\n\n    if (!isLogged) {\n        return <div\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress/>\n        </div>\n    }\n\n    return (\n        <BrowserRouter>\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n                <div className={'app-wrapper-content'}>\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n                    <Route path='/friends' render={() => <Friends/>}/>\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n                    <Route path='/login' render={() => <LoginForm/>}/>\n                </div>\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","type ActionsTypesF = {\r\n\r\n}\r\ntype sidebarType = {\r\n    id: number;\r\n    name: string;\r\n}\r\nexport type InitialStateType = {\r\n    friends: sidebarType[]\r\n}\r\nlet initialState: InitialStateType = {\r\n    friends: [\r\n        {id: 1, name: 'Abay'},\r\n        {id: 2, name: 'Karik'}\r\n    ]\r\n}\r\n\r\nexport const friendsReducer = (state:InitialStateType = initialState, action:ActionsTypesF): InitialStateType => {\r\n\r\n    return state\r\n}\r\nexport default friendsReducer","import {applyMiddleware,combineReducers,createStore} from 'redux';\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogReducer from \"./dialog-reducer\";\r\nimport friendsReducer from \"./friends-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\ndeclare global {\r\n    interface Window {store: any}\r\n}\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogReducer,\r\n    sideBarPage: friendsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    appPage:appReducer,\r\n})\r\n\r\nexport type AppStateType =ReturnType<typeof rootReducer>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware)) ;\r\nwindow.store = window.store || {}\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__3bI51\",\"error\":\"FormControl_error__2p-ba\",\"formSummaryError\":\"FormControl_formSummaryError__2aYFp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__IcOa7\",\"messages\":\"Dialogs_messages__2ipxb\",\"message\":\"Dialogs_message__2cCpI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogItems_dialogsItems__2fZHv\",\"active\":\"DialogItems_active__2ISGM\",\"img\":\"DialogItems_img__3cAL3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"UsersApiComponent_img__hQbIU\",\"selectedPage\":\"UsersApiComponent_selectedPage__2oxjD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBLock\":\"MyPosts_postsBLock__2XgTU\",\"posts\":\"MyPosts_posts__2c1oP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3kPns\",\"loginBlock\":\"Header_loginBlock__2AcFW\"};"],"sourceRoot":""}